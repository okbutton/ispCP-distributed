#!/usr/bin/perl

# ispCP ω (OMEGA) a Virtual Hosting Control Panel
# Copyright (c) 2001-2006 by moleSoftware GmbH
# http://www.molesoftware.com
# Copyright (c) 2006-2007 by isp Control Panel
# http://isp-control.net
#
#
# License:
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the MPL Mozilla Public License
#    as published by the Free Software Foundation; either version 1.1
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    MPL Mozilla Public License for more details.
#
#    You may have received a copy of the MPL Mozilla Public License
#    along with this program.
#
#    An on-line copy of the MPL Mozilla Public License can be found
#    http://www.mozilla.org/MPL/MPL-1.1.html
#
#
# The ispCP ω Home Page is at:
#
#    http://isp-control.net
#

use FindBin;
use lib "$FindBin::Bin/..";
require 'ispcp_common_code.pl';

use strict;

use warnings;

sub lock_backup_ispcp_system {

    my ($lock_file) = @_;

    push_el(\@main::el, 'lock_backup_ispcp_system()', 'Starting...');

    if ($main::cfg{'BACKUP_ISPCP'} ne 'yes') {

        push_el(\@main::el, 'lock_backup_ispcp_system()', 'NOTICE: domain backups are disabled');

        return 2;
    }

    if (-e $lock_file) {

        push_el(\@main::el, 'lock_backup_ispcp_system()', 'ERROR: backup request engine already locked !');

        return 1;

    }

    my $touch_cmd = "/bin/touch $lock_file";

    my $rs = sys_command($touch_cmd);

    return 1 if ($rs != 0);

    push_el(\@main::el, 'lock_backup_ispcp_system()', 'Ending...');

    return 0;
}


sub unlock_backup_ispcp_system {

    my ($lock_file) = @_;

    push_el(\@main::el, 'unlock_backup_ispcp_system()', 'Starting...');

	my $rs = del_file($lock_file);

	return $rs if ($rs != 0);

    push_el(\@main::el, 'unlock_backup_ispcp_system()', 'Ending...');

    return 0;

}



sub backup_ispcp_start_up {

    my ($lock_file) = @_;

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'backup_ispcp_start_up()', 'Starting...');

    $rs = lock_backup_ispcp_system($lock_file);

    return $rs if ($rs != 0);

    # config check;

    $rs = get_conf();

    return $rs if ($rs != 0);

    push_el(\@main::el, 'backup_ispcp_start_up()', 'Ending...');

    return 0;

}


sub backup_ispcp_shut_down {

    my ($lock_file) = @_;

    my $rs = undef;

    push_el(\@main::el, 'backup_ispcp_shut_down()', 'Starting...');

    $rs = unlock_backup_ispcp_system($lock_file);

    return $rs if ($rs != 0);

    push_el(\@main::el, 'backup_ispcp_shut_down()', 'Ending...');

    return 0;

}

sub err_exit {

    my $el_data = pop_el(\@main::el);

	$main::el_sep = "\t#\t";

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

    exit 1;

}

sub backup_ispcp_mail_task {

	my ($rs, $rdata, $sql) = (undef, undef, undef);

	push_el(\@main::el, 'backup_ispcp_mail_task()', 'Starting...');

	my $date = get_human_date();

	my $admin_email = $main::cfg{'DEFAULT_ADMIN_ADDRESS'};

	my $backup_dir = $main::cfg{'BACKUP_FILE_DIR'};

	my $backup_file_list = `ls -la $backup_dir`;

	my $server_name = $main::cfg{'SERVER_HOSTNAME'};

	my $server_ip = $main::cfg{'BASE_SERVER_IP'};

	my $msg_data = <<MESSAGE_TEXT;
Hey There,

I'm the automatic backup system on your $server_name ($server_ip) server.

Backup task was completed successfully!

File(s) List In ($backup_dir):

========================================================================
$backup_file_list
========================================================================
MESSAGE_TEXT

	my $out = new MIME::Entity;

	$out -> build(
				From => "Automatic Backup Manager <".$admin_email.">",
				To => $admin_email,
				Subject => "[$date] Backup report.",
				Data => $msg_data,
				'X-Mailer' => "ispCP $main::cfg{'VersionH'} Automatic Backup Messenger"
				);

	open MAIL, "| /usr/sbin/sendmail -t -oi";

	$out -> print(\*MAIL);

	close MAIL;

	push_el(\@main::el, 'backup_ispcp_mail_task()', 'Ending...');

	return 0;

}


sub backup_ispcp_engine {

	my ($rs, $rdata, $sql) = (undef, undef, undef);

	push_el(\@main::el, 'backup_ispcp_engine()', 'Starting...');

	my $cmd_tar = $main::cfg{'CMD_TAR'};

	my $cmd_rm = $main::cfg{'CMD_RM'};

	my $cmd_mv = $main::cfg{'CMD_MV'};

	my $date = get_human_date();

	my $backup_dir = $main::cfg{'BACKUP_FILE_DIR'};

	my $backup_filename = "config-backup-$date.tar.bz2";

	my $backup_cmd = "$cmd_tar --create --directory=/etc/ispcp --bzip2 --file=$backup_dir/$backup_filename . 2> $main::cfg{'LOG_DIR'}/$backup_filename.log";


	if(! -d $backup_dir) {
		$rs = make_dir($backup_dir, 0, 0, 0750);

		return $rs if ($rs != 0);
	}


	my $dbuser = $main::db_user;
	my $dbpass = $main::db_pwd;
        my $db_name = $main::cfg{'DATABASE_NAME'};

	if ($dbuser && $dbpass) {
		my $db_backup_file = "$backup_dir/$db_name.sql";
                
		my $db_backupcmd = "$main::cfg{'CMD_MYSQLDUMP'} --add-drop-table --allow-keywords --quote-names -u\'$dbuser\' -p\'$dbpass\' \'$db_name\' >\'$db_backup_file\'";
		my $db_compresscmd = "$main::cfg{'CMD_BZIP'} --force \'$db_backup_file\'";
		$rs = sys_command($db_backupcmd);

		if ($rs == 0) {
			$rs = setfmode("$db_backup_file", 0, 0, 0640);

			if ($rs != 0) {
				unlink($db_backup_file);
			} else {
				$rs = sys_command($db_compresscmd);
				return $rs if ($rs != 0);
			}
			return $rs if ($rs != 0);
		} else {
			push_el(\@main::el, 'backup_ispcp_engine()', "ERROR: Failed to backup database $db_name");
			unlink($db_backup_file);
		}
	}

	$rs = sys_command($backup_cmd);

	# do not return if backup throws an error, otherwise other domains will not be backuped
	if ($rs == 0) {

		$rs = sys_command("$cmd_rm -rf $main::cfg{'LOG_DIR'}/$backup_filename.log");

		return $rs if ($rs != 0);
	} elsif ( -e "$backup_dir/$backup_filename" ) {

		$rs = del_file("$backup_dir/$backup_filename");
		return $rs if ($rs != 0);

	}

	sys_command("find $backup_dir/* -maxdepth 0 -type f -mtime +14 -print | xargs /bin/rm");

	$rs = setfmode("$backup_dir/$backup_filename", 0, 0, 0640);

	return $rs if ($rs != 0);

	push_el(\@main::el, 'backup_ispcp_engine()', 'Ending...');

	return 0;

}


my $rs = undef;

my $proceed = $ARGV[0];


if (!defined($proceed) || $proceed eq '') {

	push_el(\@main::el, 'main()', "ERROR: Missing Input Data! Please provide appropriate command line parameter(s) (report|noreport)!");

	err_exit();

}

if ($proceed ne 'report' && $proceed ne 'noreport' ) {

	push_el(\@main::el, 'main()', "NOTE: If you want to be notified when the backup is done, please run this script with 'report' as command line parameter, otherwise with 'noreport'");

	err_exit();

}

my $backup_lock_file = "/tmp/ispcp-backup-ispcp.lock";

$rs = backup_ispcp_start_up($backup_lock_file);

err_exit() if ($rs != 0 && $rs != 2);

exit 0 if ($rs == 2); # $rs == 2 when backups are disabled

$rs = backup_ispcp_engine();

err_exit() if ($rs != 0);

if ($proceed eq 'report') {

	$rs = backup_ispcp_mail_task();

	err_exit() if ($rs != 0);
}

$rs = backup_ispcp_shut_down($backup_lock_file);

err_exit() if ($rs != 0);

exit 0;
