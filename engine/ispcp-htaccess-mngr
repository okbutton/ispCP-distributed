#!/usr/bin/perl

# ispCP ω (OMEGA) a Virtual Hosting Control Panel
# Copyright (C) 2001-2006 by moleSoftware GmbH - http://www.molesoftware.com
# Copyright (C) 2006-2010 by isp Control Panel - http://ispcp.net
#
# Version: $Id$
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is "VHCS - Virtual Hosting Control System".
#
# The Initial Developer of the Original Code is moleSoftware GmbH.
# Portions created by Initial Developer are Copyright (C) 2001-2006
# by moleSoftware GmbH. All Rights Reserved.
# Portions created by the ispCP Team are Copyright (C) 2006-2010 by
# isp Control Panel. All Rights Reserved.
#
# The ispCP ω Home Page is:
#
#    http://isp-control.net
#

use FindBin;
use lib "$FindBin::Bin/";
require 'ispcp_common_code.pl';

use strict;

use warnings;

$main::htuser_task_id = undef;

sub htuser_mngr_start_up {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'htuser_mngr_start_up()', 'Starting...');

	# checking for master process;
	$rs = check_master();
	return $rs if ($rs != 0);

	# Let's clear Execution Logs, if any.

	if (-e $main::ispcp_htaccess_mngr_el) {

		$rs = del_file($main::ispcp_htaccess_mngr_el);

		return $rs if ($rs != 0);

	}

	# config check;

	$rs = get_conf();

	return $rs if ($rs != 0);

	# sql check;

	#
	# getting initial data also must be done here;
	#

	my $sql = "
	SELECT
		domain_id,
		domain_name,
		domain_gid,
		domain_uid,
		domain_admin_id,
		domain_created_id,
		domain_created,
		domain_last_modified,
		domain_mailacc_limit,
		domain_ftpacc_limit,
		domain_traffic_limit,
		domain_sqld_limit,
		domain_sqlu_limit,
		domain_status,
		domain_alias_limit,
		domain_subd_limit,
		domain_ip_id,
		domain_disk_limit,
		domain_disk_usage,
		domain_php,
		domain_cgi
	FROM
		domain
	LIMIT 0,1";

	($rs, $rdata) = doSQL($sql);

	return $rs if ($rs != 0);

	#
	# getting task id and domain record id;
	#

	$main::htuser_task_id = $ARGV[0];

	push_el(\@main::el, 'htuser_mngr_start_up()', 'Ending...');

	return 0;

}

sub htuser_mngr_shut_down {

	my $rs = undef;

	push_el(\@main::el, 'htuser_mngr_shut_down()', 'Starting...');

	push_el(\@main::el, 'htuser_mngr_shut_down()', 'Ending...');

	return 0;

}

sub htuser_add_user_system_data {

	my ($htuser_data) = @_;

	my ($rs, $rdata, $sql) = (undef, undef, undef);

	push_el(\@main::el, 'htuser_add_user_system_data()', 'Starting...');

	if (!defined($htuser_data) || $htuser_data eq '') {

		push_el(\@main::el, 'htuser_add_user_system_data()', 'ERROR: Undefined Input Data...');

		return -1;

	}

	my ($dmn_id, $dmn_name, $user_ids, $auth_type, $auth_name, $path, $status, $domain_uid, $domain_gid) =
		(@$htuser_data[0], @$htuser_data[1], @$htuser_data[2], @$htuser_data[3], @$htuser_data[4],
		 @$htuser_data[5], @$htuser_data[6], @$htuser_data[7], @$htuser_data[8]);

	my $apache_www_dir = $main::cfg{'APACHE_WWW_DIR'};

	my $htaccess_users_file_name = $main::cfg{'HTACCESS_USERS_FILE_NAME'};

	my $htaccess_users_file = "$apache_www_dir/$dmn_name/$htaccess_users_file_name";

	my $htaccess_file = "$apache_www_dir/$dmn_name/$path/.htaccess";

	my $unames = '';

	foreach (split(',', $user_ids)) {

		my $id = $_;

		$sql = "SELECT uname FROM htaccess_users WHERE id = '$id'";

		($rs, $rdata) = doSQL($sql);

		return $rs if ($rs != 0);

		$rdata = @$rdata[0];

		$unames .= @$rdata[0]." ";

	}

	my $hfile = (get_file($htaccess_file))[1];
	if(!defined($hfile)) {
		$hfile = "";
	}

	my $htaccess_content =
        set_zone($hfile, "
        AuthType $auth_type
        AuthName \"$auth_name\"
        AuthUserFile $htaccess_users_file
        Require user $unames
        ", "PROTECTION", "#" );

	if (-e "$apache_www_dir/$dmn_name/$path/") {
		$rs = store_file($htaccess_file, $htaccess_content, $domain_uid, $domain_gid, 0644);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'htuser_add_user_system_data()', 'Ending...');

	return 0;

}

sub htuser_del_user_system_data {

	my ($htuser_data) = @_;

	my ($rs, $rdata, $sql) = (undef, undef, undef);

	push_el(\@main::el, 'htuser_del_user_system_data()', 'Starting...');

	if (!defined($htuser_data) || $htuser_data eq '') {

		push_el(\@main::el, 'htuser_del_user_system_data()', 'ERROR: Undefined Input Data...');

		return -1;

	}

	my ($dmn_id, $dmn_name, $user_ids, $auth_type, $auth_name, $path, $status, $domain_uid, $domain_gid) =
		(@$htuser_data[0], @$htuser_data[1], @$htuser_data[2], @$htuser_data[3], @$htuser_data[4],
		 @$htuser_data[5], @$htuser_data[6], @$htuser_data[7], @$htuser_data[8]);

	my $apache_www_dir = $main::cfg{'APACHE_WWW_DIR'};
	my $htaccess_users_file_name = $main::cfg{'HTACCESS_USERS_FILE_NAME'};
	my $htaccess_users_file = "$apache_www_dir/$dmn_name/$htaccess_users_file_name";
	my $htaccess_file = "$apache_www_dir/$dmn_name/$path/.htaccess";

	foreach (split(',', $dmn_id)) {

		my $id = $_;

		$sql = "SELECT count(dmn_id) FROM htaccess WHERE dmn_id = '$id' AND path = '$path'";

		($rs, $rdata) = doSQL($sql);

		return $rs if ($rs != 0);

		$rdata = @$rdata[0];

		my ($rcounter) = (@$rdata[0]);

		if($rcounter eq '1') {

			if (-e $htaccess_file) {

				my $htaccess_content = del_zone( (get_file($htaccess_file))[1],  "PROTECTION", "#" );

				$rs = store_file($htaccess_file, $htaccess_content, $domain_uid, $domain_gid, 0644);

				return $rs if ($rs != 0);

				my $cmd_wc = $main::cfg{'CMD_WC'};

				my $size = `$cmd_wc -c < $htaccess_file`;

				if ($size < 2) {
					del_file($htaccess_file);
				}
			}
		}
	}

	return $rs if ($rs != 0);

	push_el(\@main::el, 'htuser_del_user_system_data()', 'Ending...');

	return 0;

}

sub htuser_add_group_system_data {

	my ($htuser_data) = @_;

	my ($rs, $rdata, $sql) = (undef, undef, undef);

	push_el(\@main::el, 'htuser_add_group_system_data()', 'Starting...');

	if (!defined($htuser_data) || $htuser_data eq '') {

		push_el(
				\@main::el,
				'htuser_add_group_system_data()', 'ERROR: Undefined Input Data...'
			   );

		return -1;

	}

	my ($dmn_id, $dmn_name,	$group_ids, $auth_type, $auth_name, $path, $status,	$domain_uid, $domain_gid) =
		(@$htuser_data[0], @$htuser_data[1], @$htuser_data[2], @$htuser_data[3], @$htuser_data[4],
		 @$htuser_data[5], @$htuser_data[6], @$htuser_data[7], @$htuser_data[8]);

	my $ugroups = '';

	foreach (split(',', $group_ids)) {

		my $group_id = $_;

		$sql = "
			SELECT
				ugroup
			FROM
				htaccess_groups
			WHERE
				id = '$group_id'
			AND
				dmn_id = '$dmn_id'";

		($rs, $rdata) = doSQL($sql);

		$rdata = @$rdata[0];

		my $ugroup = @$rdata[0];

		$ugroups .= "$ugroup ";

	}

	my $htaccess_users_file_name = $main::cfg{'HTACCESS_USERS_FILE_NAME'};
	my $htaccess_groups_file_name = $main::cfg{'HTACCESS_GROUPS_FILE_NAME'};
	my $apache_www_dir = $main::cfg{'APACHE_WWW_DIR'};
	my $htaccess_users_file = "$apache_www_dir/$dmn_name/$htaccess_users_file_name";
	my $htaccess_groups_file = "$apache_www_dir/$dmn_name/$htaccess_groups_file_name";
	my $htaccess_file = "$apache_www_dir/$dmn_name/$path/.htaccess";

	my $hfile = (get_file($htaccess_file))[1];
	if(!defined($hfile)) {
		$hfile = "";
	}
	my $htaccess_content =
        set_zone($hfile, "
        AuthType $auth_type
        AuthName \"$auth_name\"
        AuthUserFile $htaccess_users_file
        AuthGroupFile $htaccess_groups_file
        Require group $ugroups
	", "PROTECTION", "#" );

	$rs = store_file($htaccess_file, $htaccess_content, $domain_uid, $domain_gid, 0644);

	return $rs if ($rs != 0);

	push_el(\@main::el, 'htuser_add_group_system_data()', 'Ending...');

	return 0;

}

sub htuser_del_group_system_data {

	my ($htuser_data) = @_;

	my ($rs, $rdata, $sql) = (undef, undef, undef);

	push_el(\@main::el, 'htuser_del_group_system_data()', 'Starting...');

	if (!defined($htuser_data) || $htuser_data eq '') {

		push_el(\@main::el, 'htuser_del_group_system_data()', 'ERROR: Undefined Input Data...');

		return -1;

	}

	my ($dmn_id, $dmn_name, $group_ids, $auth_type, $auth_name, $path, $status, $domain_uid, $domain_gid) =
		(@$htuser_data[0], @$htuser_data[1], @$htuser_data[2], @$htuser_data[3], @$htuser_data[4],
		 @$htuser_data[5], @$htuser_data[6], @$htuser_data[7], @$htuser_data[8]);

	my $htaccess_users_file_name = $main::cfg{'HTACCESS_USERS_FILE_NAME'};
	my $htaccess_groups_file_name = $main::cfg{'HTACCESS_GROUPS_FILE_NAME'};
	my $apache_www_dir = $main::cfg{'APACHE_WWW_DIR'};
	my $htaccess_users_file = "$apache_www_dir/$dmn_name/$htaccess_users_file_name";
	my $htaccess_groups_file = "$apache_www_dir/$dmn_name/$htaccess_groups_file_name";
	my $htaccess_file = "$apache_www_dir/$dmn_name/$path/.htaccess";

	foreach (split(',', $dmn_id)) {

		my $id = $_;

		$sql = "SELECT COUNT(dmn_id) FROM htaccess WHERE dmn_id = '$id' AND path = '$path'";

		($rs, $rdata) = doSQL($sql);
		return $rs if ($rs != 0);

		$rdata = @$rdata[0];

		my ($rcounter) = (@$rdata[0]);

		if($rcounter eq '1') {

			if (-e $htaccess_file) {

				my $htaccess_content = del_zone( (get_file($htaccess_file))[1],  "PROTECTION", "#" );

				$rs = store_file($htaccess_file, $htaccess_content, $domain_uid, $domain_gid, 0644);
				return $rs if ($rs != 0);

				my $cmd_wc = $main::cfg{'CMD_WC'};

				my $size = `$cmd_wc -c < $htaccess_file`;

				if ($size < 2) {
					del_file($htaccess_file);
				}
			}
		}
	}
	return $rs if ($rs != 0);

	push_el(\@main::el, 'htuser_del_group_system_data()', 'Ending...');

	return 0;

}

sub htuser_mngr_engine {

	my ($rs, $rows, $rdata) = (undef, undef, undef);

	push_el(\@main::el, 'htuser_mngr_engine()', 'Starting...');

	my $id = $main::htuser_task_id;
	my $sql = "
		SELECT
			t1.dmn_id,
			t2.domain_name,
			t1.user_id,
			t1.auth_type,
			t1.auth_name,
			t1.path,
			t1.status,
			t2.domain_uid,
			t2.domain_gid
		FROM
			htaccess as t1,
			domain as t2
		WHERE
			t1.id = '$id'
		AND
			t1.user_id != 0
		AND
			t1.dmn_id = t2.domain_id
	";

	($rs, $rows) = doSQL($sql);

	return $rs if ($rs != 0);

	if (scalar(@$rows) == 0) {

		#
		# protect with group;
		#

		$id = $main::htuser_task_id;
		$sql = "
			SELECT
				t1.dmn_id,
				t2.domain_name,
				t1.group_id,
				t1.auth_type,
				t1.auth_name,
				t1.path,
				t1.status,
				t2.domain_uid,
				t2.domain_gid
			FROM
				htaccess as t1,
				domain as t2
			WHERE
				t1.id = '$id'
			AND
				t1.group_id != 0
			AND
				t1.dmn_id = t2.domain_id
		";

		($rs, $rows) = doSQL($sql);

		return $rs if ($rs != 0);

		if (scalar(@$rows) != 0) {

			my $entry = @$rows[0];

			my ($htuser_status,
				$htuser_id,
				$dmn_name,
				$path,
				$dmn_id) = (@$entry[6],
						   $main::htuser_task_id,
						   @$entry[1],
						   @$entry[5],
						   @$entry[0]);

			if ($htuser_status eq 'toadd' || $htuser_status eq 'change') {

				$rs = htuser_add_group_system_data($entry);

				if ($rs == 0) {

					$sql = "UPDATE htaccess SET status = 'ok' WHERE id = $htuser_id";

				} else {

					my ($sub_name, $msg) = split(/$main::el_sep/, pop_el(\@main::el));

					$msg =~ s/\'/\\\'/g;

					$sql = "UPDATE htaccess SET status= '$sub_name | $msg' WHERE id = '$htuser_id';";

				}

				($rs, $rdata) = doSQL($sql);

				return $rs if ($rs != 0);

			} elsif ($htuser_status eq 'delete') {

				$rs = htuser_del_group_system_data($entry);

				if ($rs == 0) {

					$sql = "DELETE FROM htaccess WHERE id = '$htuser_id'";

				} else {

					my ($sub_name, $msg) = split(/$main::el_sep/, pop_el(\@main::el));

					$msg =~ s/\'/\\\'/g;

					$sql = "UPDATE htaccess SET status = '$sub_name | $msg' WHERE id = $htuser_id;";

				}

				($rs, $rdata) = doSQL($sql);

				return $rs if ($rs != 0);

				$rs = htuser_del_user_system_data($entry);

			}

		}

	} else {

		#
		# continue with single user;
		#

		my $entry = @$rows[0];

		my ($htuser_status, $htuser_id, $dmn_name, $path) =

			(@$entry[6], $main::htuser_task_id, @$entry[1], @$entry[5]);

		if ($htuser_status eq 'toadd' || $htuser_status eq 'change') {

			$rs = htuser_add_user_system_data($entry);

			if ($rs == 0) {

				$sql = "UPDATE htaccess SET status = 'ok' WHERE id = '$htuser_id';";

			} else {

				my ($sub_name, $msg) = split(/$main::el_sep/, pop_el(\@main::el));

				$msg =~ s/\'/\\\'/g;

				$sql = "UPDATE htaccess SET status = '$sub_name | $msg' WHERE id = '$htuser_id';";

			}

			($rs, $rdata) = doSQL($sql);

			return $rs if ($rs != 0);

		} elsif ($htuser_status eq 'delete') {

			$rs = htuser_del_user_system_data($entry);

			if ($rs == 0) {

				$sql = "DELETE FROM htaccess WHERE id = '$htuser_id';";

			} else {

				my ($sub_name, $msg) = split(/$main::el_sep/, pop_el(\@main::el));

				$msg =~ s/\'/\\\'/g;

				$sql = "UPDATE htaccess SET status = '$sub_name | $msg' WHERE id = '$htuser_id';";

			}

			($rs, $rdata) = doSQL($sql);

			return $rs if ($rs != 0);

		}

	}

	sleep(1);

	push_el(\@main::el, 'htuser_mngr_engine()', 'Ending...');

	return 0;

}

my $rs = undef;

$rs = htuser_mngr_start_up();

if ($rs != 0) {

    dump_el(\@main::el, $main::ispcp_htaccess_mngr_el);

    htuser_mngr_shut_down();

    exit 1;

}

$rs = htuser_mngr_engine();

if ($rs != 0) {

    dump_el(\@main::el, $main::ispcp_htaccess_mngr_el);

    htuser_mngr_shut_down();

    exit 1;

}

$rs = htuser_mngr_shut_down();

if ($rs != 0) {

    dump_el(\@main::el, $main::ispcp_htaccess_mngr_el);

    exit 1;

}

exit 0;
