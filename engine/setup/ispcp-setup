#!/usr/bin/perl

# ispCP ω a Virtual Hosting Control Panel
# Copyright (c) 2001-2006 by moleSoftware GmbH
# http://www.molesoftware.com
# Copyright (c) 2006-2007 by isp Control Panel
# http://isp-control.net
#
#
# License:
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the MPL Mozilla Public License
#    as published by the Free Software Foundation; either version 1.1
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    MPL Mozilla Public License for more details.
#
#    You may have received a copy of the MPL Mozilla Public License
#    along with this program.
#
#    An on-line copy of the MPL Mozilla Public License can be found
#    http://www.mozilla.org/MPL/MPL-1.1.html
#
#
# The ispCP ω Home Page is at:
#
#    http://isp-control.net
#


use FindBin;
use lib "$FindBin::Bin/..";
require 'ispcp_common_code.pl';

use strict;
use warnings;
use Socket;

##############################################################################
##								SUBROUTINES									##
##############################################################################

%main::ua = ();

sub welcome_note {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'welcome_note()', 'Starting...');

	my $welcome_message = <<MSG;

    Welcome to ISPCP '$main::cfg{'Version'}' Setup Dialog.
    This program will set up ISPCP OMEGA system on your server.
MSG

	print STDOUT $welcome_message;

	push_el(\@main::el, 'welcome_note()', 'Ending...');

	return 0;

}

sub get_sys_hostname {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'get_sys_hostname()', 'Starting...');

	my $cmd = "$main::cfg{'CMD_HOSTNAME'} 1>/tmp/ispcp-setup.hostname";

	$rs = sys_command($cmd);

	return ($rs, '') if ($rs != 0);

	($rs, $rdata) = get_file("/tmp/ispcp-setup.hostname");

	return ($rs, '') if ($rs != 0);

	chop($rdata);

	$rs = del_file("/tmp/ispcp-setup.hostname");

	push_el(\@main::el, 'get_sys_hostname()', 'Ending...');

	return (0, $rdata);

}

sub ask_hostname {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'ask_hostname()', 'Starting...');

	my $hostname = undef;

	($rs, $hostname) = get_sys_hostname();

	return $rs if ($rs != 0);

	my $qmsg = "    Please enter fully qualified hostname (Enter for defaults) [$hostname]: ";

	print STDOUT $qmsg;

	$rdata = readline(\*STDIN); chop($rdata);

	if (!defined($rdata) || $rdata eq '') {

		$rdata = $hostname;

	}

	if ($rdata =~ /^([\w][\w-]{0,253}[\w]\.)*([\w][\w-]{0,253}[\w])\.([a-zA-Z]{2,6})$/) {

		 $main::ua{'hostname'} = $rdata;

	}
	else {

		print STDOUT "\n    Hostname not a valid domain name!\n";
		return 1;

	}

	push_el(\@main::el, 'ask_hostname()', 'Ending...');

	return 0;

}

sub ask_eth {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'ask_eth()', 'Starting...');

	#my $cmd = "/sbin/ifconfig |awk \'BEGIN{FS=\":\";}{print \$2}\'|awk \'{if(NR==2)print \$1}\' 1>/tmp/ispcp-setup.ip";

	my $cmd = "/sbin/ifconfig |grep -v inet6|grep inet|grep -v 127.0.0.1|awk ' {print \$2}'|head -n 1|awk -F: '{print \$NF}' 1>/tmp/ispcp-setup.ip";

	$rs = sys_command($cmd);

	return ($rs, '') if ($rs != 0);

	($rs, $rdata) = get_file("/tmp/ispcp-setup.ip");

	return ($rs, '') if ($rs != 0);

	chop($rdata);

	$rs = del_file("/tmp/ispcp-setup.ip");

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);

	my $eth = $rdata;

	my $qmsg = "\n    Please enter system network address (Enter for defaults) [$eth]: ";

	print STDOUT $qmsg;

	$rdata = readline(\*STDIN); chop($rdata);

	if (!defined($rdata) || $rdata eq '') {

		$main::ua{'eth_ip'} = $eth;

	} else {

		$main::ua{'eth_ip'} = $rdata;

	}

	push_el(\@main::el, 'ask_eth()', 'Ending...');

	return 0;

}

sub check_eth {

	return 0 unless $main::ua{'eth_ip'} =~ /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/;

	my ($d1, $d2, $d3, $d4) = ($1, $2, $3, $4);

	return 0 if (($d1 <= 0) || ($d1 >= 255));

	return 0 if (($d2 < 0) || ($d2 > 255));

	return 0 if (($d3 < 0) || ($d3 > 255));

	return 0 if (($d4 <= 0) || ($d4 >= 255));

	return 1;

}

sub ask_db_host {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'ask_db_host()', 'Starting...');

	my $db_host = 'localhost';

	my $qmsg = "\n    Please enter SQL server host (Enter for defaults) [$db_host]: ";

	print STDOUT $qmsg;

	$rdata = readline(\*STDIN); chop($rdata);

	if (!defined($rdata) || $rdata eq '') {

		$main::ua{'db_host'} = $db_host;

	} else {

		$main::ua{'db_host'} = $rdata;

	}

	push_el(\@main::el, 'ask_db_host()', 'Ending...');

	return 0;

}

sub ask_db_name {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'ask_db_name()', 'Starting...');

	my $db_name = 'ispcp';

	my $qmsg = "\n    Please enter system SQL database (Enter for defaults) [$db_name]: ";

	print STDOUT $qmsg;

	$rdata = readline(\*STDIN); chop($rdata);

	if (!defined($rdata) || $rdata eq '') {

		$main::ua{'db_name'} = $db_name;

	} else {

		$main::ua{'db_name'} = $rdata;

	}

	push_el(\@main::el, 'ask_db_name()', 'Ending...');

	return 0;

}


sub ask_db_user {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'ask_db_user()', 'Starting...');

	my $db_user = 'root';

	my $qmsg = "\n    Please enter system SQL user (Enter for defaults) [$db_user]: ";

	print STDOUT $qmsg;

	$rdata = readline(\*STDIN); chop($rdata);

	if (!defined($rdata) || $rdata eq '') {

		$main::ua{'db_user'} = $db_user;

	} else {

		$main::ua{'db_user'} = $rdata;

	}

	push_el(\@main::el, 'ask_db_user()', 'Ending...');

	return 0;

}

sub ask_db_password {

	my ($rs, $pass1, $pass2) = (undef, undef, undef);

	push_el(\@main::el, 'ask_db_password()', 'Starting...');

	my $db_password = 'none';

	my $qmsg = "\n    Please enter system SQL password (Enter for defaults) [$db_password]: ";

	$pass1 = read_password($qmsg);

	if (!defined($pass1) || $pass1 eq '') {

		$main::ua{'db_password'} = '';

	} else {

		$qmsg = "    Please repeat system SQL password: ";

		$pass2 = read_password($qmsg);

		if ($pass1 eq $pass2) {

			$main::ua{'db_password'} = $pass1;

		} else {
			print STDOUT "\n    Passwords do not match!";
			return 1;

		}

	}

	push_el(\@main::el, 'ask_db_password()', 'Ending...');

	return 0;

}

sub ask_db_ftp_user {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'ask_db_ftp_user()', 'Starting...');

	my $db_user = 'vftp';

	my $qmsg = "\n    Please enter ISPCP ftp SQL user (Enter for defaults) [$db_user]: ";

	print STDOUT $qmsg;

	$rdata = readline(\*STDIN); chop($rdata);

	if (!defined($rdata) || $rdata eq '') {

		$main::ua{'db_ftp_user'} = $db_user;

	} else {

		$main::ua{'db_ftp_user'} = $rdata;

	}

	push_el(\@main::el, 'ask_db_ftp_user()', 'Ending...');

	return 0;

}

sub ask_db_ftp_password {

	my ($rs, $pass1, $pass2) = (undef, undef, undef);

	push_el(\@main::el, 'ask_db_ftp_password()', 'Starting...');

	my $db_password = 'none';

	my $qmsg = "\n    Please enter ISPCP ftp SQL user password (Enter for defaults) [$db_password]: ";

	$pass1 = read_password($qmsg);

	if (!defined($pass1) || $pass1 eq '') {

		$main::ua{'db_ftp_password'} = '';

	} else {

		$qmsg = "    Please repeat ISPCP ftp SQL user password: ";

		$pass2 = read_password($qmsg);

		if ($pass1 eq $pass2) {

			$main::ua{'db_ftp_password'} = $pass1;

		} else {
			print STDOUT "\n    Passwords do not match!";
			return 1;

		}

	}

	push_el(\@main::el, 'ask_db_ftp_password()', 'Ending...');

	return 0;

}

sub ask_db_pma_user {

	my ($rs, $rdata) = (undef, undef);
	push_el(\@main::el, 'ask_db_pma_user()', 'Starting...');
	my $db_user = 'pma';

	my $qmsg = "\n    Please enter ISPCP phpMyAdmin Control user (Enter for defaults) [$db_user]: ";
	print STDOUT $qmsg;
	$rdata = readline(\*STDIN); chop($rdata);

	if (!defined($rdata) || $rdata eq '') {
		$main::ua{'db_pma_user'} = $db_user;
	} else {
		$main::ua{'db_pma_user'} = $rdata;
	}

	push_el(\@main::el, 'ask_db_pma_user()', 'Ending...');
	return 0;
}

sub ask_db_pma_password {

	my ($rs, $pass1, $pass2) = (undef, undef, undef);
	push_el(\@main::el, 'ask_db_pma_password()', 'Starting...');
	my $db_password = 'none';

	my $qmsg = "\n    Please enter ISPCP phpMyAdmin Control user password (Enter for defaults) [$db_password]: ";
	$pass1 = read_password($qmsg);

	if (!defined($pass1) || $pass1 eq '') {
		$main::ua{'db_pma_password'} = '';
	} else {
		$qmsg = "    Please repeat ISPCP phpMyAdmin Control user password: ";
		$pass2 = read_password($qmsg);

		if ($pass1 eq $pass2) {
			$main::ua{'db_pma_password'} = $pass1;
		} else {
			print STDOUT "\n    Passwords do not match!";
			return 1;
		}
	}

	push_el(\@main::el, 'ask_db_pma_password()', 'Ending...');
	return 0;

}

sub ask_admin {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'ask_admin()', 'Starting...');

	my $admin = 'admin';

	my $qmsg = "\n    Please enter administrator login name (Enter for defaults) [$admin]: ";

	print STDOUT $qmsg;

	$rdata = readline(\*STDIN); chop($rdata);

	if (!defined($rdata) || $rdata eq '') {

		$main::ua{'admin'} = $admin;

	} else {

		$main::ua{'admin'} = $rdata;

	}

	push_el(\@main::el, 'ask_admin()', 'Ending...');

	return 0;

}

sub ask_admin_password {

	my ($rs, $pass1, $pass2) = (undef, undef, undef);

	push_el(\@main::el, 'ask_admin_password()', 'Starting...');

	my $qmsg = "\n    Please enter administrator password: ";

	$pass1 = read_password($qmsg);

	if (!defined($pass1) || $pass1 eq '') {
		return 1;
	} else {
		if (length($pass1) < 5) {
			print STDOUT "\n    Password too short!";
			return 1;
		}
		$qmsg = "    Please repeat administrator password: ";
		$pass2 = read_password($qmsg);

		if ($pass1 eq $pass2) {
			$main::ua{'admin_password'} = $pass1;
		} else {
			print STDOUT "\n    Passwords do not match!";
			return 1;
		}
	}

	push_el(\@main::el, 'ask_admin_password()', 'Ending...');

	return 0;

}

sub ask_admin_email {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'ask_admin_email()', 'Starting...');

	my $qmsg = "\n    Please enter admininistrator email address: ";

	print STDOUT $qmsg;

	$rdata = readline(\*STDIN); chop($rdata);

	if (!defined($rdata) || $rdata eq '') {

		return 1;

	} else {

		if ($rdata =~ /^([\w\W]{1,255})\@([\w][\w-]{0,253}[\w]\.)*([\w][\w-]{0,253}[\w])\.([a-zA-Z]{2,6})$/) {

			$main::ua{'admin_email'} = $rdata;

		} else {
			print STDOUT "\n    E-Mail address not valid!";
			return 1;

		}

	}

	push_el(\@main::el, 'ask_admin_email()', 'Ending...');

	return 0;

}

sub ask_vhost {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'ask_vhost()', 'Starting...');

	my $eth = $main::ua{'eth_ip'};

	my $addr = gethostbyaddr($main::ua{'eth_ip'}, AF_INET);

	if (!$addr) {
		$addr = $main::ua{'hostname'};
	}

	my $vhost = "admin.$addr";

	my $qmsg = "\n    Please enter the domain name ISPCP OMEGA will run on [$vhost]: ";

	print STDOUT $qmsg;

	$rdata = readline(\*STDIN);
	chop($rdata);

	if (!defined($rdata) || $rdata eq '') {
		$main::ua{'admin_vhost'} = $vhost;
	}
	else {
		if ($rdata =~ /^([\w][\w-]{0,253}[\w]\.)*([\w][\w-]{0,253}[\w])\.([a-zA-Z]{2,6})$/) {
			$main::ua{'admin_vhost'} = $rdata;
		}
		else {
			print STDOUT "\n    Vhost not valid!";
			return 1;
		}

	}

	push_el(\@main::el, 'ask_vhost()', 'Ending...');

	return 0;
}

sub user_dialog {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'user_dialog()', 'Starting...');

	$rs = welcome_note();

	return $rs if ($rs != 0);

	do {
		$rs = ask_hostname();
	} while ($rs == 1);

	return $rs if ($rs != 0);

	do {

		$rs = ask_eth();

		return $rs if ($rs != 0);

	} while (check_eth() == 0);

	do {
		$rs = ask_vhost();
	} while ($rs == 1);

	#
	# SQL Questions
	#

	$rs = ask_db_host();

	return $rs if ($rs != 0);

	$rs = ask_db_name();

	return $rs if ($rs != 0);

	$rs = ask_db_user();

	return $rs if ($rs != 0);

	do {

		$rs = ask_db_password();

	} while ($rs == 1);

	#
	# ISPCP ftp SQL user questions;
	#

	$rs = ask_db_ftp_user();
	return $rs if ($rs != 0);

	do {
		$rs = ask_db_ftp_password();
	} while ($rs == 1);

	#
	# PMA user for SQL
	#

	$rs = ask_db_pma_user();
	return $rs if ($rs != 0);

	do {
		$rs = ask_db_pma_password();
	} while ($rs == 1);

	#
	# Admin questions
	#

	$rs = ask_admin();

	return $rs if ($rs != 0);

	do {

		$rs = ask_admin_password();

	} while ($rs == 1);

	do {

		$rs = ask_admin_email();

	} while ($rs == 1);

	push_el(\@main::el, 'user_dialog()', "hostname: $main::ua{'hostname'}");

	push_el(\@main::el, 'user_dialog()',  "eth: $main::ua{'eth_ip'}");

	push_el(\@main::el, 'user_dialog()',  "panel_vhost: $main::ua{'admin_vhost'}");

	push_el(\@main::el, 'user_dialog()',  "db_host: $main::ua{'db_host'}");

	push_el(\@main::el, 'user_dialog()',  "db_name: $main::ua{'db_name'}");

	push_el(\@main::el, 'user_dialog()',  "db_user: $main::ua{'db_user'}");

	push_el(\@main::el, 'user_dialog()',  "db_password: $main::ua{'db_password'}");

	push_el(\@main::el, 'user_dialog()',  "admin: $main::ua{'admin'}");

	push_el(\@main::el, 'user_dialog()',  "admin_password: $main::ua{'admin_password'}");

	push_el(\@main::el, 'user_dialog()',  "admin_email: $main::ua{'admin_email'}");

	push_el(\@main::el, 'user_dialog()', 'Ending...');

	return 0;

}

sub setup_start_up {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_start_up()', 'Starting...');

	# config check;

	$rs = get_conf();

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_start_up()', 'Ending...');

	return 0;

}

sub setup_shut_down {

	my ($rs, $rdata) = (undef, undef);

	my $cmd = "/bin/sh $main::cfg{'ROOT_DIR'}/engine/setup/set-gui-permissions.sh";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);

	$cmd = "/bin/sh $main::cfg{'ROOT_DIR'}/engine/setup/set-engine-permissions.sh";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_shut_down()', 'Starting...');

	my $shut_down_message = <<MSG;

	Congratulations !

	ISPCP '$main::cfg{'Version'}' Setup completed successfully !

	Please type http://$main::ua{'admin_vhost'} in your
	browser!

MSG
	print STDOUT $shut_down_message;

	push_el(\@main::el, 'setup_shut_down()', 'Ending...');

	return 0;

}

sub check_host_interface {

	push_el(\@main::el, 'check_host_interface()', 'Starting...');

	my ($rs, $rdata, $cmd) = (undef, undef, undef);

	$cmd = "$main::cfg{'CMD_IFCONFIG'} $main::ua{'eth'} 1>/tmp/ispcp-setup-iface.stdout 2>/tmp/ispcp-setup-iface.stderr";

	$rs = sys_command($cmd);

	if ($rs != 0) {

		push_el(\@main::el, 'check_host_interface()', "ERROR: Can't find $main::ua{'eth'} device!");

		return $rs;
	}

	$cmd = "$main::cfg{'CMD_CAT'} /tmp/ispcp-setup-iface.stdout | awk 'BEGIN { i=0 } { i++ } { if (i == 1) { print \$5 } } { if (i == 2) { print substr(\$2, 6) } }' 1>/tmp/ispcp-setup-iface-data.stdout 2>/tmp/ispcp-setup-iface-data.stderr";

	$rs = sys_command($cmd);

	($rs, $rdata) = get_file("/tmp/ispcp-setup-iface-data.stdout");

	return $rs if ($rs != 0);

	$rdata =~ /([^\n]+)\n([^\n]+)\n/;

	$main::ua{'eth_hwaddr'} = $1;

	$main::ua{'eth_ip'} = $2;

	$rs = del_file("/tmp/ispcp-setup-iface.stdout");

	return $rs if ($rs != 0);

	$rs = del_file("/tmp/ispcp-setup-iface.stderr");

	return $rs if ($rs != 0);

	$rs = del_file("/tmp/ispcp-setup-iface-data.stdout");

	return $rs if ($rs != 0);

	$rs = del_file("/tmp/ispcp-setup-iface-data.stderr");

	return $rs if ($rs != 0);

	push_el(\@main::el, 'check_host_interface()', 'Ending...');

	return 0;
}

sub check_host_sql {

	push_el(\@main::el, 'check_host_sql()', 'Starting...');

	my ($rs, $rdata, $sql) = (undef, undef, undef);

	$sql = "show databases;";

	$main::db_host = $main::ua{'db_host'};

	$main::db_user = $main::ua{'db_user'};

	$main::db_pwd = $main::ua{'db_password'};

	$main::db_name = "";

	@main::db_connect = (
						 "DBI:mysql:$main::db_name:$main::db_host",
						 $main::db_user,
						 $main::db_pwd
						);

	($rs, $rdata) = doSQL($sql);

	return $rs if ($rs != 0);

	$main::db = undef;

	push_el(\@main::el, 'check_host_sql()', 'Ending...');

	return 0;
}

sub check_host_system {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'check_host_system()', 'Starting...');

	#$rs = check_host_interface();

	#return $rs if ($rs != 0);

	$rs = check_host_sql();

	return $rs if ($rs != 0);

	push_el(\@main::el, 'check_host_system()', 'Ending...');

	return 0;

}

sub setup_system_users {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_system_users()', 'Starting...');

	## Mailbox user
	my ($fuid, $fgid) = ($main::cfg{'MTA_MAILBOX_UID_NAME'}, $main::cfg{'MTA_MAILBOX_GID_NAME'});
	my ($uid, $gid) = (undef, undef);

	my @udata = ();
	my @gdata = ();

	@gdata = getgrnam($fgid);

	if (scalar(@gdata) == 0) { # we have not this one group data;
		my $cmd = "$main::cfg{'CMD_GROUPADD'} $fgid";
		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

		@gdata = getgrnam($fgid);
	}

	$gid = $gdata[2];

	@udata = getpwnam($fuid);

	if (scalar(@udata) == 0) { # we have not this one user data;
		my $cmd = "$main::cfg{'CMD_USERADD'} -c vmail-user -g $gid -s /bin/false $fuid";
		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

		@udata = getpwnam($fuid);
	}

	$uid = $udata[2];
	$main::ua{'su_uid'} = $uid;
	$main::ua{'su_gid'} = $gid;

	## FCGI Master user
	my ($muid, $mgid, $prefix) = ($main::cfg{'APACHE_SUEXEC_MIN_UID'}, $main::cfg{'APACHE_SUEXEC_MIN_GID'}, $main::cfg{'APACHE_SUEXEC_USER_PREF'});
	my ($vuuid, $vugid) = (undef, undef);

	@gdata = getgrnam($mgid);
	@udata = getpwnam($muid);

	if (scalar(@gdata) == 0) { # we have not this one group data;
		my $cmd = "$main::cfg{'CMD_GROUPADD'} -g $mgid $prefix$mgid";
		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

	}

	if (scalar(@udata) == 0) { # we have not this one user data;
		my $cmd = "$main::cfg{'CMD_USERADD'} -d  $main::cfg{'PHP_STARTER_DIR'}/master -m -c vu-master -g $prefix$mgid -s /bin/false -u $muid $prefix$muid";
		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

	}

	$main::ua{'vu_uid'} = $muid;
	$main::ua{'vu_gid'} = $mgid;
	##

	push_el(\@main::el, 'setup_system_users()', 'Ending...');

	return 0;

}

sub setup_system_dirs {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_system_dirs()', 'Starting...');

	$rs = make_dir($main::cfg{'APACHE_WWW_DIR'}, $main::cfg{'APACHE_USER'}, $main::cfg{'APACHE_GROUP'}, 0755);

	return $rs if ($rs != 0);

	$rs = make_dir($main::cfg{'APACHE_USERS_LOG_DIR'}, $main::cfg{'APACHE_USER'}, $main::cfg{'APACHE_GROUP'}, 0755);

	return $rs if ($rs != 0);

	$rs = make_dir($main::cfg{'APACHE_BACKUP_LOG_DIR'}, 'root', 'root', 0755);

	return $rs if ($rs != 0);

	$rs = make_dir($main::cfg{'MTA_VIRTUAL_CONF_DIR'}, 'root', 'root', 0755);

	return $rs if ($rs != 0);

	$rs = make_dir($main::cfg{'MTA_VIRTUAL_MAIL_DIR'}, 'root', 'root', 0755);

	return $rs if ($rs != 0);



	$rs = make_dir($main::cfg{'LOG_DIR'}, 'root', 'root', 0755);

	return $rs if ($rs != 0);

	$rs = make_dir($main::cfg{'BACKUP_FILE_DIR'}, 'root', 'root', 0755);

	return $rs if ($rs != 0);

	$rs = make_dir($main::cfg{'PHP_STARTER_DIR'}, 'root', 'root', 0755);

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_system_dirs()', 'Ending...');

	return 0;

}

sub setup_config {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_config()', 'Starting...');

	$rs = set_conf_val('SERVER_HOSTNAME', $main::ua{'hostname'});

	return $rs if ($rs != 0);

	$rs = set_conf_val('BASE_SERVER_IP', $main::ua{'eth_ip'});

	return $rs if ($rs != 0);

	$rs = set_conf_val('BASE_SERVER_VHOST', $main::ua{'admin_vhost'});

	return $rs if ($rs != 0);

	$rs = set_conf_val('DATABASE_HOST', $main::ua{'db_host'});

	return $rs if ($rs != 0);

	$rs = set_conf_val('DATABASE_NAME', $main::ua{'db_name'});

	return $rs if ($rs != 0);

	$rs = set_conf_val('DATABASE_USER', $main::ua{'db_user'});

	return $rs if ($rs != 0);

	if ($main::ua{'db_password'} ne '') {

		($rs, $rdata) = encrypt_db_password($main::ua{'db_password'});

		return $rs if ($rs != 0);

		$rs = set_conf_val('DATABASE_PASSWORD', $rdata);

		return $rs if ($rs != 0);

	}

	$rs = set_conf_val('MTA_MAILBOX_MIN_UID', $main::ua{'su_uid'});

	return $rs if ($rs != 0);

	$rs = set_conf_val('MTA_MAILBOX_UID', $main::ua{'su_uid'});

	return $rs if ($rs != 0);

	$rs = set_conf_val('MTA_MAILBOX_GID', $main::ua{'su_gid'});

	return $rs if ($rs != 0);

	$rs = set_conf_val('APACHE_SUEXEC_MIN_UID', $main::ua{'vu_uid'});

	return $rs if ($rs != 0);

	$rs = set_conf_val('APACHE_SUEXEC_MIN_GID', $main::ua{'vu_gid'});

	return $rs if ($rs != 0);

	$rs = set_conf_val('DEFAULT_ADMIN_ADDRESS', $main::ua{'admin_email'});

	$rs = store_conf();

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_config()', 'Ending...');

	return 0;

}

sub setup_sql {

	my ($rs, $rdata, $cfg_tpl, $cfg) = (undef, undef, undef, undef);

	push_el(\@main::el, 'setup_sql()', 'Starting...');

	#
	# check for existing database;
	#

	my $sql = "show tables;";

	($rs, $rdata) = doSQL($sql);

	if ($rs == 0) { # Yes, we have one ! Let's drop it;

		my $store_db_name = $main::db_name;


		# Let's reset data;


		$main::db = undef;

		$main::db_name = '';

		@main::db_connect = (
								"DBI:mysql:$main::db_name:$main::db_host",
								$main::db_user,
								$main::db_pwd
							);

		$sql = "drop database $store_db_name;";

		($rs, $rdata) = doSQL($sql);

		return $rs if ($rs != 0);


		# Let's reset data;


		$main::db = undef;

		$main::db_name = $store_db_name;

		@main::db_connect = (
								"DBI:mysql:$main::db_name:$main::db_host",
								$main::db_user,
								$main::db_pwd
							);

	}

	#
	# Now we'll create our database;
	#

	($rs, $rdata) = get_file("$main::cfg{'CONF_DIR'}/database/database.sql");

	return $rs if ($rs != 0);

	$rdata =~ s/\{DATABASE_NAME\}/$main::db_name/gi;

	$rs = store_file("/tmp/db.sql", $rdata, 'root', 'root', 0644);

	return $rs if ($rs != 0);

	my $cmd = "$main::cfg{'CMD_MYSQL'} --host=$main::db_host --user=$main::db_user --pass=$main::db_pwd < /tmp/db.sql 1>/tmp/db.sql.stdout 2>/tmp/db.sql.stderr";

	$rs = sys_command($cmd);
	return $rs if ($rs != 0);

	#
	# languages tables;
	#

	my $languages_sql = "$main::cfg{'CONF_DIR'}/database/languages.sql";

	$cmd = "$main::cfg{'CMD_MYSQL'} --host=$main::db_host --user=$main::db_user --pass=$main::db_pwd $main::db_name < $languages_sql 1>/tmp/db.sql.stdout 2>/tmp/db.sql.stderr";

	$rs = sys_command($cmd);
	return $rs if ($rs != 0);


	$rs = del_file("/tmp/db.sql");
	return $rs if ($rs != 0);

	$rs = del_file("/tmp/db.sql.stdout");
	return $rs if ($rs != 0);

	$rs = del_file("/tmp/db.sql.stderr");
	return $rs if ($rs != 0);

	#
	# Let's populate our base with some data;
	#

	my $admin_password = crypt_data($main::ua{'admin_password'});

	$sql = "INSERT INTO admin VALUES  (1, '$main::ua{'admin'}','$admin_password', 'admin', 0, '', 0, '', '', '', '', '', '','$main::ua{'admin_email'}', '', '', '', '', '', '')";

	($rs, $rdata) = doSQL($sql);

	return $rs if ($rs != 0);

	$sql = "INSERT INTO server_ips VALUES (1, '$main::ua{'eth_ip'}', '$main::ua{'hostname'}', '$main::ua{'hostname'}');";

	($rs, $rdata) = doSQL($sql);

	return $rs if ($rs != 0);

	#
	# we'll add ISPCP ftp SQL user here.
	#
	$main::db = undef;

	@main::db_connect = (
							"DBI:mysql:mysql:$main::db_host",
							$main::db_user,
							$main::db_pwd
						);

	my $vftp_sql_user = $main::ua{'db_ftp_user'};
	my $vftp_sql_password = $main::ua{'db_ftp_password'};
	my $hostname = $main::ua{'db_host'};

	$sql = "delete from tables_priv where Host = '$main::cfg{'SERVER_HOSTNAME'}' and Db = '$main::db_name' and User = '$vftp_sql_user'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = " delete from user where Host = '$hostname' and User = '$vftp_sql_user'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "flush privileges";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "grant select,insert,update,delete on $main::db_name.ftp_group to '$vftp_sql_user'\@'$hostname' identified by '$vftp_sql_password'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "grant select,insert,update,delete on $main::db_name.ftp_users to '$vftp_sql_user'\@'$hostname' identified by '$vftp_sql_password'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "grant select,insert,update,delete on $main::db_name.quotalimits to '$vftp_sql_user'\@'$hostname' identified by '$vftp_sql_password'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "grant select,insert,update,delete on $main::db_name.quotatallies to '$vftp_sql_user'\@'$hostname' identified by '$vftp_sql_password'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	#
	# Create the PMA user
	#
	$main::db = undef;

	@main::db_connect = (
							"DBI:mysql:mysql:$main::db_host",
							$main::db_user,
							$main::db_pwd
						);

	my $pma_sql_user = $main::ua{'db_pma_user'};
	my $pma_sql_password = $main::ua{'db_pma_password'};

	$sql = "delete from tables_priv where Host = '$main::cfg{'SERVER_HOSTNAME'}' and Db = '$main::db_name' and User = '$pma_sql_user'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = " delete from user where Host = '$hostname' and User = '$pma_sql_user'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "flush privileges";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "GRANT USAGE ON mysql.* TO \'$pma_sql_user\'\@\'$hostname\' IDENTIFIED BY \'$pma_sql_password\';";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "GRANT SELECT (Host, User, Select_priv, Insert_priv, Update_priv, Delete_priv, Create_priv, Drop_priv, Reload_priv, Shutdown_priv, Process_priv, File_priv, Grant_priv, References_priv, Index_priv, Alter_priv, Show_db_priv, Super_priv, Create_tmp_table_priv, Lock_tables_priv, Execute_priv, Repl_slave_priv, Repl_client_priv) ON mysql.user TO \'$pma_sql_user\'\@\'$hostname\';";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "GRANT SELECT ON mysql.db TO \'$pma_sql_user\'\@\'$hostname\';";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "GRANT SELECT ON mysql.host TO \'$pma_sql_user\'\@\'$hostname\';";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "GRANT SELECT (Host, Db, User, Table_name, Table_priv, Column_priv) ON mysql.tables_priv TO \'$pma_sql_user\'\@\'$hostname\';";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	#
	# Insert pma user and password to config file
	#

	my $cfg_dir = "$main::cfg{'GUI_ROOT_DIR'}/tools/pma/";

	($rs, $cfg_tpl) = get_tpl($cfg_dir, 'config.inc.php');

	return $rs if ($rs != 0);

	my %tag_hash = (
					'{PMA_USER}' => $pma_sql_user,
					'{PMA_PASS}' => $pma_sql_password,
					'{HOSTNAME}' => $hostname
				   );

	($rs, $cfg) = prep_tpl(\%tag_hash, $cfg_tpl);

	return $rs if ($rs != 0);

	$rs = store_file("$cfg_dir/config.inc.php", $cfg, "$main::cfg{'APACHE_SUEXEC_USER_PREF'}$main::cfg{'APACHE_SUEXEC_MIN_UID'}", "$main::cfg{'APACHE_GROUP'}", 0440);

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_sql()', 'Ending...');

	return 0;

}

sub setup_crontab {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_crontab()', 'Starting...');

	my $cfg_dir = "$main::cfg{'CONF_DIR'}/crontab";

	my $bk_dir = "$cfg_dir/backup";

	my $wrk_dir = "$cfg_dir/working";

	my ($cfg_tpl, $cfg, $cmd) = (undef, undef, undef);

	if (! -e "$bk_dir/crontab.conf.ispcp") { # We are running setup for the first time.

		# Let's backup system crontab (if any);

		$cmd = "$main::cfg{'CMD_CRONTAB'} -u root -l &> $bk_dir/crontab.conf.system";

		$rs = sys_command_rs($cmd);

		$cmd = "$main::cfg{'CMD_CRONTAB'} -u root -r &> /tmp/ispcp-setup-crontab.log";

		$rs = sys_command_rs($cmd);

		$rs = del_file("/tmp/ispcp-setup-crontab.log");

		return $rs if ($rs != 0);

		($rs, $cfg_tpl) = get_tpl($cfg_dir, 'crontab.conf');

		return $rs if ($rs != 0);

		my %tag_hash = (
						'{LOG_DIR}' => $main::cfg{'LOG_DIR'},
						'{QUOTA_ROOT_DIR}' => $main::cfg{'QUOTA_ROOT_DIR'},
						'{TRAFF_ROOT_DIR}' => $main::cfg{'TRAFF_ROOT_DIR'},
						'{TOOLS_ROOT_DIR}' => $main::cfg{'TOOLS_ROOT_DIR'},
						'{BACKUP_ROOT_DIR}' => $main::cfg{'BACKUP_ROOT_DIR'}
					   );

		($rs, $cfg) = prep_tpl(\%tag_hash, $cfg_tpl);

		return $rs if ($rs != 0);

		$rs = store_file("$bk_dir/crontab.conf.ispcp", $cfg, 'root', 'root', 0644);

		return $rs if ($rs != 0);

		$rs = store_file("$wrk_dir/crontab.conf", $cfg, 'root', 'root', 0644);

		return $rs if ($rs != 0);

	}

	$cmd = "$main::cfg{'CMD_CRONTAB'} -u root -r &> /tmp/ispcp-setup-crontab.log";

	$rs = sys_command_rs($cmd);

	$cmd = "$main::cfg{'CMD_CRONTAB'} -u root $bk_dir/crontab.conf.ispcp";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);

	$rs = del_file("/tmp/ispcp-setup-crontab.log");

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_crontab()', 'Ending...');

	return 0;

}

sub setup_resolver {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_resolver()', 'Starting...');

	my $data = "nameserver 127.0.0.1\n";

	if ($main::cfg{'SECONDARY_DNS'} ne '') {
		$data .= "nameserver $main::cfg{'SECONDARY_DNS'}\n";
	}

	$rs = store_file("/etc/resolv.conf", $data, 'root', 'root', 0644);

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_resolver()', 'Ending...');

	return 0;

}

sub setup_hosts {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_hosts()', 'Starting...');

	my $hostname = $main::ua{'hostname'};

	my $hostname_local = "$hostname.local";

	my $ip = $main::ua{'eth_ip'};

	$rs = store_file("/etc/hosts", "\n# 'hosts' file configuration.\n\n127.0.0.1\t$hostname_local\tlocalhost\n$ip\t$hostname\t$hostname\n", 'root', 'root', 0644);

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_hosts()', 'Ending...');

	return 0;

}

sub setup_named {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_named()', 'Starting...');

	my $cfg_dir = "$main::cfg{'CONF_DIR'}/bind";

	my $bk_dir = "$cfg_dir/backup";

	my $wrk_dir = "$cfg_dir/working";

	my ($cfg_tpl, $cfg, $cmd) = (undef, undef, undef);

	if ($main::cfg{'CMD_NAMED'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_NAMED'} stop &> /tmp/ispcp-setup-services.log");

	}

	($rs, $cfg_tpl) = get_file("$cfg_dir/named.conf");

	return $rs if ($rs != 0);

	if (! -e "$bk_dir/named.conf.ispcp") {

		$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'BIND_CONF_FILE'} $bk_dir/named.conf.system";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

		$cfg = get_file($main::cfg{'BIND_CONF_FILE'});

		return $rs if ($rs != 0);

		$rs = store_file("$bk_dir/named.conf.ispcp", "$cfg$cfg_tpl", 'root', 'root', 0644);

		return $rs if ($rs != 0);

	}

	$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/named.conf.ispcp $main::cfg{'BIND_CONF_FILE'}";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);

	$rs = store_file("$wrk_dir/named.conf", "$cfg_tpl", 'root', 'root', 0644);

	return $rs if ($rs != 0);

	if ($main::cfg{'CMD_NAMED'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_NAMED'} start &> /tmp/ispcp-setup-services.log");

	}

	push_el(\@main::el, 'setup_named()', 'Ending...');

	return 0;

}

	#
	# Create PHP directory for Master User (FastCGI)
	#

sub setup_php_master_user_dirs {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_php_master_user_dirs()', 'Starting...');

	my $starter_dir = $main::cfg{'PHP_STARTER_DIR'};

	# Create php4 directory for Master User

	$rs = make_dir("$starter_dir/master/php4", 'root', 'root', 0755);

	return $rs if ($rs != 0);

	# Create php5 directory for Master User

	$rs = make_dir("$starter_dir/master/php5", 'root', 'root', 0755);

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_php_master_user_dirs()', 'Ending...');

	return 0;
}

sub setup_php {

	my ($rs, $rdata, $cmd, $cfg_tpl, $cfg) = (undef, undef, undef, undef, undef);

	push_el(\@main::el, 'setup_php()', 'Starting...');

	#
	# Configure the fastcgi.conf
	#

	my $cfg_dir = "$main::cfg{'CONF_DIR'}/apache";

	my $bk_dir = "$cfg_dir/backup";

	($rs, $cfg_tpl) = get_tpl("$cfg_dir/working", 'fastcgi.conf');
	return $rs if ($rs != 0);

	my %tag_hash = (
					'{APACHE_SUEXEC_MIN_UID}' => $main::cfg{'APACHE_SUEXEC_MIN_UID'},
					'{APACHE_SUEXEC_MIN_GID}' => $main::cfg{'APACHE_SUEXEC_MIN_GID'},
					'{APACHE_SUEXEC_USER_PREF}' => $main::cfg{'APACHE_SUEXEC_USER_PREF'},
					'{PHP_STARTER_DIR}' => $main::cfg{'PHP_STARTER_DIR'}
					);

	($rs, $cfg) = prep_tpl(\%tag_hash, $cfg_tpl);
	return $rs if ($rs != 0);

	$rs = store_file("$bk_dir/fastcgi.conf.ispcp", $cfg, 'root', 'root', 0644);
	return $rs if ($rs != 0);

	$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/fastcgi.conf.ispcp $main::cfg{'APACHE_CONF_DIR'}/mods-available/fastcgi.conf";
	$rs = sys_command($cmd);
	return $rs if ($rs != 0);

	#
	# Copy the Master starter dir
	#

	$cfg_dir = "$main::cfg{'CONF_DIR'}/fcgi";

	$bk_dir = "$cfg_dir/backup";

	#my $tpl_dir = "$cfg_dir/parts";
	my $tpl_dir = "$cfg_dir/parts/master";


	## PHP4 Starter
	($rs, $cfg_tpl) = get_tpl($tpl_dir, 'php4-fcgi-starter.tpl');
	return $rs if ($rs != 0);

	%tag_hash = (
					'{PHP_STARTER_DIR}' => $main::cfg{'PHP_STARTER_DIR'},
					'{DMN_NAME}' => "master"
					);

	($rs, $cfg) = prep_tpl(\%tag_hash, $cfg_tpl);
	return $rs if ($rs != 0);

	$rs = store_file("$bk_dir/php4-fcgi-starter.ispcp", $cfg, "$main::cfg{'APACHE_SUEXEC_USER_PREF'}"."$main::cfg{'APACHE_SUEXEC_MIN_UID'}", "$main::cfg{'APACHE_SUEXEC_USER_PREF'}". "$main::cfg{'APACHE_SUEXEC_MIN_GID'}", 0755);
	return $rs if ($rs != 0);

	$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/php4-fcgi-starter.ispcp $main::cfg{'PHP_STARTER_DIR'}/master/php4-fcgi-starter";
	$rs = sys_command($cmd);
	return $rs if ($rs != 0);

	## PHP5 Starter
	($rs, $cfg_tpl) = get_tpl($tpl_dir, 'php5-fcgi-starter.tpl');
	return $rs if ($rs != 0);

	%tag_hash = (
					'{PHP_STARTER_DIR}' => $main::cfg{'PHP_STARTER_DIR'},
					'{DMN_NAME}' => "master"
					);

	($rs, $cfg) = prep_tpl(\%tag_hash, $cfg_tpl);
	return $rs if ($rs != 0);

	$rs = store_file("$bk_dir/php5-fcgi-starter.ispcp", $cfg, "$main::cfg{'APACHE_SUEXEC_USER_PREF'}"."$main::cfg{'APACHE_SUEXEC_MIN_UID'}", "$main::cfg{'APACHE_SUEXEC_USER_PREF'}"."$main::cfg{'APACHE_SUEXEC_MIN_GID'}", 0755);
	return $rs if ($rs != 0);

	$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/php5-fcgi-starter.ispcp $main::cfg{'PHP_STARTER_DIR'}/master/php5-fcgi-starter";
	$rs = sys_command($cmd);
	return $rs if ($rs != 0);

	## php4.ini
	($rs, $cfg_tpl) = get_tpl($tpl_dir, '/php4/php.ini');
	return $rs if ($rs != 0);

	%tag_hash = (
					'{WWW_DIR}' => $main::cfg{'ROOT_DIR'},
					'{DMN_NAME}' => "gui",
					'{CONF_DIR}' => $main::cfg{'CONF_DIR'},
					'{PEAR_DIR}' => $main::cfg{'PEAR_DIR'}
					);

	($rs, $cfg) = prep_tpl(\%tag_hash, $cfg_tpl);
	return $rs if ($rs != 0);

    $rs = store_file("$main::cfg{'PHP_STARTER_DIR'}/master/php4/php.ini", $cfg, "$main::cfg{'APACHE_SUEXEC_USER_PREF'}"."$main::cfg{'APACHE_SUEXEC_MIN_UID'}", "$main::cfg{'APACHE_SUEXEC_USER_PREF'}"."$main::cfg{'APACHE_SUEXEC_MIN_GID'}", 0644);

	return $rs if ($rs != 0);

	## php5.ini
	($rs, $cfg_tpl) = get_tpl($tpl_dir, '/php5/php.ini');
	return $rs if ($rs != 0);

	%tag_hash = (
					'{WWW_DIR}' => $main::cfg{'ROOT_DIR'},
					'{DMN_NAME}' => "gui",
					'{CONF_DIR}' => $main::cfg{'CONF_DIR'},
					'{PEAR_DIR}' => $main::cfg{'PEAR_DIR'}
					);

	($rs, $cfg) = prep_tpl(\%tag_hash, $cfg_tpl);
	return $rs if ($rs != 0);

	$rs = store_file("$main::cfg{'PHP_STARTER_DIR'}/master/php5/php.ini", $cfg, "$main::cfg{'APACHE_SUEXEC_USER_PREF'}"."$main::cfg{'APACHE_SUEXEC_MIN_UID'}", "$main::cfg{'APACHE_SUEXEC_USER_PREF'}"."$main::cfg{'APACHE_SUEXEC_MIN_GID'}", 0644);

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_php()', 'Ending...');

	return 0;

}

#
# Add Bind CFG
#

sub add_named_cfg_data {

    my ($base_vhost) = @_;

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'add_named_cfg_data()', 'Starting...');

    if (!defined($base_vhost) || $base_vhost eq '') {
        push_el(\@main::el, 'add_named_cfg_data()', 'ERROR: Undefined Input Data...');
        return -1;
    }

    #
    # Initial data we need;
    #

    my $conf_dir = $main::cfg{'CONF_DIR'};

    my $sys_cfg = $main::cfg{'BIND_CONF_FILE'};

    my $named_db_dir = $main::cfg{'BIND_DB_DIR'};


    my $tpl_dir = "$conf_dir/bind/parts";

    my $backup_dir = "$conf_dir/bind/backup";

    my $working_dir = "$conf_dir/bind/working";


    my $timestamp = time;

    my $backup_cfg = "$backup_dir/named.conf.$timestamp";

    my $working_cfg = "$working_dir/named.conf";

    #
    #  BEGIN/END tags, and templates needed for this config;
    #

    my ($dta_b, $dta_e, $entry_b, $entry_e, $entry) = ('', '', '', '', '');

    (
     $rs,
     $dta_b,
     $dta_e,
     $entry_b,
     $entry_e,
     $entry
    ) = get_tpl(
                $tpl_dir,
                'cfg_dta_b.tpl',
                'cfg_dta_e.tpl',
                'cfg_entry_b.tpl',
                'cfg_entry_e.tpl',
                'cfg_entry.tpl'
               );

    return $rs if ($rs != 0);

    #
    # Let's construct nedded tags and entries;
    #

    my %tag_hash = (
                    '{DMN_NAME}' => $base_vhost,
                    '{DB_DIR}' => $named_db_dir
                   );

    my ($entry_b_val, $entry_e_val, $entry_val) = ('', '', '');

    (
     $rs,
     $entry_b_val,
     $entry_e_val,
     $entry_val
    ) = prep_tpl(
                 \%tag_hash,
                 $entry_b,
                 $entry_e,
                 $entry
                );

    return $rs if ($rs != 0);

    #
    # Let's get Sytem and Workind config files;
    #

    my ($sys, $working) = ('', '');


    ($rs, $sys) = get_file($sys_cfg);

    return $rs  if ($rs != 0);

    ($rs, $working) = get_file($working_cfg);

    return $rs  if ($rs != 0);

    ($rs, $rdata) = get_tag($dta_b, $dta_e, $working);

    return $rs if ($rs != 0);

    #
    # Is the new domain entry exists ?
    #

    ($rs, $rdata) = get_tag($entry_b_val, $entry_e_val, $working);

    if ($rs == 0) {

        # Yes it exists ! Then we must delete it !

        ($rs, $working) = del_tag($entry_b_val, "$entry_e_val\n", $working);

        return $rs if ($rs != 0);

    }

    ($rs, $rdata) = get_tag($entry_b, $entry_e, $working);

    return $rs if ($rs != 0);

    #
    # Let's contruct the replacement and do it;
    #

    my $entry_repl = "$entry_b_val$entry_val$entry_e_val\n$entry_b$entry_e";

    ($rs, $working) = repl_tag($entry_b, $entry_e, $working, $entry_repl);

    return $rs if ($rs != 0);

    #
    # Here we'll backup production config file;
    #

    $rs = sys_command("cp -p $sys_cfg $backup_cfg");

    return $rs if ($rs != 0);

    #
    # Let's save working copy;
    #

    $rs = store_file($working_cfg, $working, 'root', 'root', 0644);

    return $rs if ($rs != 0);

    #
    # Here we'll replace data in production config file with data in working
    # confing file. A little workaround will be done. If working copy data does not exist
    # in production config then we will add it;
    #

    ($rs, $rdata) = get_tag($dta_b, $dta_e, $sys);

    if ($rs == 0) { # YES ! Data is here ! /in production config file/;

        ($rs, $sys) = repl_tag($dta_b, $dta_e, $sys, $working);

        return $rs if ($rs != 0);

    } elsif ($rs == -5) {

        $sys .= $working;

    } else {

        return $rs;

    }

    $rs = store_file($sys_cfg, $sys, 'root', 'root', 0644);

    return $rs if ($rs != 0);


    push_el(\@main::el, 'add_named_cfg_data()', 'Ending...');

    return 0;
}

#
# Add DNS DB Data
#

sub add_named_db_data {

    my ($base_ip, $base_vhost) = @_;

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'add_named_db_data()', 'Starting...');

    if (!defined($base_vhost) || $base_vhost eq '') {
        push_el(\@main::el, 'add_named_db_data()', 'ERROR: Undefined Input Data...');
        return -1;
    }

    #
    # Initial data we need;
    #

    my $conf_dir = $main::cfg{'CONF_DIR'};

    my $named_db_dir = $main::cfg{'BIND_DB_DIR'};

    my $sec_dns_ip = $main::cfg{'SECONDARY_DNS'};

    #
    # Any secondary DNS defined;
    #

	if (!$sec_dns_ip) {
		$sec_dns_ip = $base_ip;
	}

    my $tpl_dir = "$conf_dir/bind/parts";

    my $backup_dir = "$conf_dir/bind/backup";

    my $working_dir = "$conf_dir/bind/working";


    my $db_fname = "$base_vhost.db";


    my $sys_cfg = "$named_db_dir/$db_fname";

    my $working_cfg = "$working_dir/$db_fname";

    #
    # Let's get needed tags and templates;
    #

    my ($entry, $dns2_b, $dns2_e) = ('', '', '');

    ($rs, $entry, $dns2_b, $dns2_e) = get_tpl(
                                              $tpl_dir,
                                              'db_master_e.tpl',
                                              'db_dns2_b.tpl',
                                              'db_dns2_e.tpl'
                                             );

    return $rs if ($rs != 0);

	#
	# RFC 1912
	#

	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);

	my $time2 = sprintf "%4d%02d%02d00",$year+1900,$mon+1,$mday;

    #
    # Let's prepare them;
    #

    my %tag_hash = (
                    '{DMN_NAME}' => $base_vhost,
                    '{DMN_IP}' => $base_ip,
                    '{BASE_SERVER_IP}' => $base_ip,
                    '{SECONDARY_DNS_IP}' => $sec_dns_ip,
                    '{TIMESTAMP}' => $time2
                   );

    ($rs, $entry, $dns2_b, $dns2_e) = prep_tpl(
                                               \%tag_hash,
                                               $entry,
                                               $dns2_b,
                                               $dns2_e
                                              );

    return $rs if ($rs != 0);

    #
    # Let's store generated data;
    #

    $rs = store_file($working_cfg, $entry, 'root', 'root', 0644);

    return $rs if ($rs != 0);

    $rs = store_file($sys_cfg, $entry, 'root', 'root', 0644);

    return $rs if ($rs != 0);

    push_el(\@main::el, 'add_named_db_data()', 'Ending...');


    return 0;
}

sub setup_httpd {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_httpd()', 'Starting...');

	my $cfg_dir = "$main::cfg{'CONF_DIR'}/apache";

	my $bk_dir = "$cfg_dir/backup";

	my $wrk_dir = "$cfg_dir/working";

	my ($cfg_tpl, $cfg, $cmd) = (undef, undef, undef);

	if ($main::cfg{'CMD_HTTPD'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_HTTPD'} stop &> /tmp/ispcp-setup-services.log");

	}

	#
	# Master file
	#

	($rs, $cfg_tpl) = get_file("$cfg_dir/00_master.conf");

	return $rs if ($rs != 0);

	my %tag_hash = (
					'{BASE_SERVER_IP}' 			=> $main::cfg{'BASE_SERVER_IP'},
					'{BASE_SERVER_VHOST}' 		=> $main::cfg{'BASE_SERVER_VHOST'},
					'{DEFAULT_ADMIN_ADDRESS}' 	=> $main::cfg{'DEFAULT_ADMIN_ADDRESS'},
					'{ROOT_DIR}' 				=> $main::cfg{'ROOT_DIR'},
					'{APACHE_USERS_LOG_DIR}' 	=> $main::cfg{'APACHE_USERS_LOG_DIR'},
					'{APACHE_LOG_DIR}' 			=> $main::cfg{'APACHE_LOG_DIR'},
					'{PHP_STARTER_DIR}' 		=> $main::cfg{'PHP_STARTER_DIR'}
					);

	($rs, $cfg) = prep_tpl(\%tag_hash, $cfg_tpl);

	return $rs if ($rs != 0);

	$rs = store_file("$main::cfg{'APACHE_SITES_DIR'}/00_master.conf", $cfg, 'root', 'root', 0644);

	return $rs if ($rs != 0);

    $rs = add_named_cfg_data($main::cfg{'BASE_SERVER_VHOST'});

    return $rs if ($rs != 0);

    $rs = add_named_db_data($main::cfg{'BASE_SERVER_IP'}, $main::cfg{'BASE_SERVER_VHOST'});

    return $rs if ($rs != 0);

	#
	# Default vhost file
	#

	($rs, $cfg_tpl) = get_file("$cfg_dir/httpd.conf");

	return $rs if ($rs != 0);

	%tag_hash = (
					'{HOST_IP}' => $main::cfg{'BASE_SERVER_IP'}
					);

	($rs, $cfg) = prep_tpl(\%tag_hash, $cfg_tpl);

	return $rs if ($rs != 0);

	$rs = store_file("$main::cfg{'APACHE_SITES_DIR'}/ispcp.conf", $cfg, 'root', 'root', 0644);

	return $rs if ($rs != 0);

	# Enable sites

	if ( -e "/usr/sbin/a2ensite" ) {

		sys_command_rs("/usr/sbin/a2ensite ispcp.conf &> /tmp/ispcp-setup-services.log");
		sys_command_rs("/usr/sbin/a2ensite 00_master.conf &> /tmp/ispcp-setup-services.log");

	}

	#
	# Disable default site --> 000-default (if not, ispcp is not working)
	#

	if (-e "/usr/sbin/a2dissite") {

		sys_command_rs("/usr/sbin/a2dissite 000-default &> /tmp/ispcp-setup-services.log");

	}

	#
	# start fastcgi, suexec and rewrite mod
	# Disable default site (if not, ispcp not working)
	#

	if ( -e "/usr/sbin/a2enmod" ) {

		sys_command_rs("/usr/sbin/a2enmod actions &> /tmp/ispcp-setup-services.log");
		sys_command_rs("/usr/sbin/a2enmod rewrite &> /tmp/ispcp-setup-services.log");
		sys_command_rs("/usr/sbin/a2enmod fastcgi &> /tmp/ispcp-setup-services.log");
		sys_command_rs("/usr/sbin/a2enmod suexec &> /tmp/ispcp-setup-services.log");

	}

	#
	# Here we'll manage some permission;
	#

	my $gui_root_dir = "$main::cfg{'ROOT_DIR'}/gui";

	$cmd = "$main::cfg{'CMD_CHOWN'} -R $main::cfg{'APACHE_USER'}:$main::cfg{'APACHE_GROUP'} $gui_root_dir";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);

	sleep(5);

	if ($main::cfg{'CMD_HTTPD'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_HTTPD'} start &> /tmp/ispcp-setup-services.log");

	}

	push_el(\@main::el, 'setup_httpd()', 'Ending...');

	return 0;

}

sub setup_mta {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_mta()', 'Starting...');

	my $cfg_dir = "$main::cfg{'CONF_DIR'}/postfix";

	my $bk_dir = "$cfg_dir/backup";

	my $wrk_dir = "$cfg_dir/working";

	my $vrl_dir = "$cfg_dir/ispcp";

	my ($cfg_tpl, $cfg, $cmd) = (undef, undef, undef);

	if ($main::cfg{'CMD_MTA'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_MTA'} stop &> /tmp/ispcp-setup-services.log");

	}

	if (! -e "$bk_dir/main.cf.ispcp") {

	if ( -e "$main::cfg{'POSTFIX_CONF_FILE'}") {

		$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'POSTFIX_CONF_FILE'} $bk_dir/main.cf.system";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

	}

	if ( -e "$main::cfg{'POSTFIX_MASTER_CONF_FILE'}") {

		$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'POSTFIX_MASTER_CONF_FILE'} $bk_dir/master.cf.system";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

	}

		($rs, $cfg_tpl) = get_tpl($cfg_dir, 'main.cf');

		return $rs if ($rs != 0);

		my %tag_hash = (
						'{MTA_HOSTNAME}' => $main::cfg{'SERVER_HOSTNAME'},
						'{MTA_LOCAL_DOMAIN}' => "$main::cfg{'SERVER_HOSTNAME'}.local",
						'{MTA_VERSION}' => $main::cfg{'VersionH'},
						'{MTA_HOST_TYPE}' => $main::cfg{'Version'},
						'{MTA_TRANSPORT_HASH}' => $main::cfg{'MTA_TRANSPORT_HASH'},
						'{MTA_LOCAL_MAIL_DIR}' => $main::cfg{'MTA_LOCAL_MAIL_DIR'},
						'{MTA_LOCAL_ALIAS_HASH}' => $main::cfg{'MTA_LOCAL_ALIAS_HASH'},
						'{MTA_VIRTUAL_MAIL_DIR}' => $main::cfg{'MTA_VIRTUAL_MAIL_DIR'},
						'{MTA_VIRTUAL_DMN_HASH}' => $main::cfg{'MTA_VIRTUAL_DMN_HASH'},
						'{MTA_VIRTUAL_MAILBOX_HASH}' => $main::cfg{'MTA_VIRTUAL_MAILBOX_HASH'},
						'{MTA_VIRTUAL_ALIAS_HASH}' => $main::cfg{'MTA_VIRTUAL_ALIAS_HASH'},
						'{MTA_MAILBOX_MIN_UID}' => $main::cfg{'MTA_MAILBOX_MIN_UID'},
						'{MTA_MAILBOX_UID}' => $main::cfg{'MTA_MAILBOX_UID'},
						'{MTA_MAILBOX_GID}' => $main::cfg{'MTA_MAILBOX_GID'}
					   );

		($rs, $cfg) = prep_tpl(\%tag_hash, $cfg_tpl);

		return $rs if ($rs != 0);

		$rs = store_file("$bk_dir/main.cf.ispcp", $cfg, 'root', 'root', 0644);

		return $rs if ($rs != 0);

		$cmd = "$main::cfg{'CMD_CP'} -p $cfg_dir/master.cf $bk_dir/master.cf.ispcp";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

	}


	$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/main.cf.ispcp $main::cfg{'POSTFIX_CONF_FILE'}";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);


	$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/master.cf.ispcp $main::cfg{'POSTFIX_MASTER_CONF_FILE'}";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);


	$rs = setfmode("$main::cfg{'ROOT_DIR'}/engine/messager/ispcp-arpl-msgr", $main::cfg{'MTA_MAILBOX_UID_NAME'}, $main::cfg{'MTA_MAILBOX_GID_NAME'}, 0755);

	return $rs if ($rs != 0);


	$cmd = "$main::cfg{'CMD_CP'} -p $vrl_dir/{aliases,domains,mailboxes,transport,sender-access} $main::cfg{'MTA_VIRTUAL_CONF_DIR'}";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);


	$cmd = "$main::cfg{'CMD_CP'} -p $vrl_dir/{aliases,domains,mailboxes,transport,sender-access} $wrk_dir";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);


	$cmd = "$main::cfg{'CMD_POSTMAP'} $main::cfg{'MTA_VIRTUAL_CONF_DIR'}/{aliases,domains,mailboxes,transport,sender-access} &> /tmp/ispcp-setup-services.log";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);


	$rs = sys_command("$main::cfg{'CMD_NEWALIASES'} &> /tmp/ispcp-setup-services.log");

	return $rs if ($rs != 0);


	if ($main::cfg{'CMD_MTA'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_MTA'} start &> /tmp/ispcp-setup-services.log");

	}

	#
	# SASL password database;
	#
	#
	#if (-e $main::cfg{'MTA_SASLDB_FILE'}) {
	#
	#	$rs = del_file($main::cfg{'MTA_SASLDB_FILE'});
	#	return $rs if ($rs != 0);
	#
	#}
	#
	#$cmd = "$main::cfg{'CMD_LN'} -s $main::cfg{'MTA_SASLDB_FILE'} /etc/sasldb2";
	#$rs = sys_command($cmd);
	#return $rs if ($rs != 0);
	#

	push_el(\@main::el, 'setup_mta()', 'Ending...');

	return 0;

}

sub setup_po {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_po()', 'Starting...');

	my $cfg_dir = "$main::cfg{'CONF_DIR'}/courier";

	my $bk_dir = "$cfg_dir/backup";

	my $wrk_dir = "$cfg_dir/working";

	my ($cfg_tpl, $cfg, $cmd) = (undef, undef, undef);

	if ($main::cfg{'CMD_AUTHD'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_AUTHD'} stop &> /tmp/ispcp-setup-services.log");

	}

	if ($main::cfg{'CMD_IMAP'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_IMAP'} stop &> /tmp/ispcp-setup-services.log");

	}

	if ($main::cfg{'CMD_POP'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_POP'} stop &> /tmp/ispcp-setup-services.log");

	}

	if (! -e "$bk_dir/imapd.ispcp") {


		# Let's backup system configs;

		if ( -e "$main::cfg{'COURIER_CONF_DIR'}/imapd" ) {

			$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'COURIER_CONF_DIR'}/imapd $bk_dir/imapd.system";

			$rs = sys_command($cmd);

			return $rs if ($rs != 0);

		}

		if ( -e "$main::cfg{'COURIER_CONF_DIR'}/pop3d" ) {

			$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'COURIER_CONF_DIR'}/pop3d $bk_dir/pop3d.system";

			$rs = sys_command($cmd);

			return $rs if ($rs != 0);

		}

		if (exists $main::cfg{'AUTHLIB_CONF_DIR'} && $main::cfg{'AUTHLIB_CONF_DIR'}) {

			if ( -e "$main::cfg{'AUTHLIB_CONF_DIR'}/authdaemonrc" ) {

				$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'AUTHLIB_CONF_DIR'}/authdaemonrc $bk_dir/authdaemonrc.system";

				$rs = sys_command($cmd);

				return $rs if ($rs != 0);

			}

			if ( -e "$main::cfg{'AUTHLIB_CONF_DIR'}/authmodulelist" ) {

				$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'AUTHLIB_CONF_DIR'}/authmodulelist $bk_dir/authmodulelist.system";

				$rs = sys_command($cmd);

				return $rs if ($rs != 0);

			}

		} else {

			if ( -e "$main::cfg{'COURIER_CONF_DIR'}/authdaemonrc" ) {

				$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'COURIER_CONF_DIR'}/authdaemonrc $bk_dir/authdaemonrc.system";

				$rs = sys_command($cmd);

				return $rs if ($rs != 0);

			}

			if ( -e "$main::cfg{'COURIER_CONF_DIR'}/authmodulelist" ) {

				$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'COURIER_CONF_DIR'}/authmodulelist $bk_dir/authmodulelist.system";

				$rs = sys_command($cmd);

				return $rs if ($rs != 0);

			}

		}

		if (exists $main::cfg{'AUTHLIB_CONF_DIR'} && $main::cfg{'AUTHLIB_CONF_DIR'}) {

			if (-e "$main::cfg{'AUTHLIB_CONF_DIR'}/userdb") {

				$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'AUTHLIB_CONF_DIR'}/userdb $bk_dir/userdb.system";

				$rs = sys_command($cmd);

				return $rs if ($rs != 0);

			}

		} else {

			if (-e "$main::cfg{'COURIER_CONF_DIR'}/userdb") {

				$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'COURIER_CONF_DIR'}/userdb $bk_dir/userdb.system";

				$rs = sys_command($cmd);

				return $rs if ($rs != 0);

			}

		}

		$cmd = "$main::cfg{'CMD_CP'} -p $cfg_dir/imapd $bk_dir/imapd.ispcp";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

		$cmd = "$main::cfg{'CMD_CP'} -p $cfg_dir/pop3d $bk_dir/pop3d.ispcp";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

		$cmd = "$main::cfg{'CMD_CP'} -p $cfg_dir/authdaemonrc $bk_dir/authdaemonrc.ispcp";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

		$cmd = "$main::cfg{'CMD_CP'} -p $cfg_dir/authmodulelist $bk_dir/authmodulelist.ispcp";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

	}

	$cmd = "$main::cfg{'CMD_CP'} -p $cfg_dir/userdb $wrk_dir";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);

	$cmd = "$main::cfg{'CMD_CP'} -p $cfg_dir/userdb $main::cfg{'COURIER_CONF_DIR'}";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);

	if (exists $main::cfg{'AUTHLIB_CONF_DIR'} && $main::cfg{'AUTHLIB_CONF_DIR'}) {

		$rs = setfmode("$main::cfg{'AUTHLIB_CONF_DIR'}/userdb", 'root', 'root', 0600);

	} else {

		$rs = setfmode("$main::cfg{'COURIER_CONF_DIR'}/userdb", 'root', 'root', 0600);

	}

	return $rs if ($rs != 0);

	$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/imapd.ispcp $main::cfg{'COURIER_CONF_DIR'}/imapd";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);

	$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/pop3d.ispcp $main::cfg{'COURIER_CONF_DIR'}/pop3d";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);

	if (exists $main::cfg{'AUTHLIB_CONF_DIR'} && $main::cfg{'AUTHLIB_CONF_DIR'}) {

		$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/authdaemonrc.ispcp $main::cfg{'AUTHLIB_CONF_DIR'}/authdaemonrc";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

		$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/authmodulelist.ispcp $main::cfg{'AUTHLIB_CONF_DIR'}/authmodulelist";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

	} else {

		$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/authdaemonrc.ispcp $main::cfg{'COURIER_CONF_DIR'}/authdaemonrc";

			$rs = sys_command($cmd);

			return $rs if ($rs != 0);

			$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/authmodulelist.ispcp $main::cfg{'COURIER_CONF_DIR'}/authmodulelist";

			$rs = sys_command($cmd);

			return $rs if ($rs != 0);

	}

	$rs = sys_command($main::cfg{'CMD_MAKEUSERDB'});

	return $rs if ($rs != 0);

	if ($main::cfg{'CMD_AUTHD'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_AUTHD'} start &> /tmp/ispcp-setup-services.log");

	}

	if ($main::cfg{'CMD_IMAP'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_IMAP'} start &> /tmp/ispcp-setup-services.log");

	}

	if ($main::cfg{'CMD_POP'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_POP'} start &> /tmp/ispcp-setup-services.log");

	}

	push_el(\@main::el, 'setup_po()', 'Ending...');

	return 0;

}

sub setup_ftpd {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_ftpd()', 'Starting...');

	my $cfg_dir = "$main::cfg{'CONF_DIR'}/proftpd";

	my $bk_dir = "$cfg_dir/backup";

	my ($cfg_tpl, $cfg, $cmd) = (undef, undef, undef);

	if ($main::cfg{'CMD_FTPD'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_FTPD'} stop &> /tmp/ispcp-setup-services.log");

	}

	if (! -e $main::cfg{'FTPD_CONF_FILE'}) {
		$rs = set_conf_val('FTPD_CONF_FILE', '/etc/proftpd/proftpd.conf');
		return $rs if ($rs != 0);

		$rs = store_conf();
		return $rs if ($rs != 0);
	}

	if (! -e "$bk_dir/proftpd.conf.ispcp") {

		$cmd = "$main::cfg{'CMD_CP'} -p $main::cfg{'FTPD_CONF_FILE'} $bk_dir/proftpd.conf.system";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);


		($rs, $cfg_tpl) = get_tpl($cfg_dir, 'proftpd.conf');

		return $rs if ($rs != 0);

		my %tag_hash = (
						'{HOST_NAME}' => $main::cfg{'SERVER_HOSTNAME'},
						'{DATABASE_NAME}' => $main::db_name,
						'{DATABASE_HOST}' => $main::db_host,
						'{DATABASE_USER}' => $main::ua{'db_ftp_user'},
						'{DATABASE_PASS}' => $main::ua{'db_ftp_password'}
					   );

		($rs, $cfg) = prep_tpl(\%tag_hash, $cfg_tpl);

		return $rs if ($rs != 0);

		$rs = store_file("$bk_dir/proftpd.conf.ispcp", $cfg, 'root', 'root', 0600);

		return $rs if ($rs != 0);

	}

	$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/proftpd.conf.ispcp $main::cfg{'FTPD_CONF_FILE'}";

	$rs = sys_command($cmd);

	return $rs if ($rs != 0);

	#
	# To fill ftp_traff.log file with somethign. ;)
	#

	$rs = store_file("$main::cfg{'TRAFF_LOG_DIR'}/$main::cfg{'FTP_TRAFF_LOG'}", "\n", 'root', 'root', 0644);

	return $rs if ($rs != 0);

	#
	# Let's start service;
	#

	if ($main::cfg{'CMD_FTPD'} ne 'no') {

		sys_command_rs("$main::cfg{'CMD_FTPD'} start &> /tmp/ispcp-setup-services.log");

	}

	push_el(\@main::el, 'setup_ftpd()', 'Ending...');

	return 0;

}

sub setup_ispcpd {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_ispcpd()', 'Starting...');

	sys_command_rs("$main::cfg{'CMD_CHOWN'} root:root $main::cfg{'CMD_ISPCPD'} $main::cfg{'CMD_ISPCPN'} &> /tmp/ispcp-setup-services.log");

	sys_command_rs("/bin/chmod 0755 $main::cfg{'CMD_ISPCPD'} $main::cfg{'CMD_ISPCPN'} &> /tmp/ispcp-setup-services.log");

	if ( -e "/usr/sbin/update-rc.d" ) {

		sys_command_rs("/usr/sbin/update-rc.d ispcp_daemon defaults 99 &> /tmp/ispcp-setup-services.log");

	}

	sys_command_rs("$main::cfg{'CMD_ISPCPD'} stop &> /tmp/ispcp-setup-services.log");

	sleep(3);

	sys_command_rs("$main::cfg{'CMD_ISPCPD'} start &> /tmp/ispcp-setup-services.log");

	$rs = del_file("/tmp/ispcp-setup-services.log");

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_ispcpd()', 'Ending...');

	return 0;

}

sub setup_host_system {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_host_system()', 'Starting...');

	$rs = setup_system_users();

	return $rs if ($rs != 0);

	$rs = setup_system_dirs();

	return $rs if ($rs != 0);

	$rs = setup_config();

	return $rs if ($rs != 0);

	$rs = setup_sql();

	return $rs if ($rs != 0);

	$rs = setup_crontab();

	return $rs if ($rs != 0);

	$rs = setup_resolver();

	return $rs if ($rs != 0);

	$rs = setup_hosts();

	return $rs if ($rs != 0);

	$rs = setup_named();

	return $rs if ($rs != 0);

	$rs = setup_php_master_user_dirs();

	return $rs if ($rs != 0);

	$rs = setup_php();

	return $rs if ($rs != 0);

	$rs = setup_httpd();

	return $rs if ($rs != 0);

	$rs = setup_mta();

	return $rs if ($rs != 0);

	$rs = setup_po();

	return $rs if ($rs != 0);

	$rs = setup_ftpd();

	return $rs if ($rs != 0);

	$rs = setup_ispcpd();

	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_host_system()', 'Ending...');

	return 0;

}

##############################################################################
##									MAIN									##
##############################################################################

my $rs = undef;

$rs = setup_start_up();

if ($rs != 0) {

	my $el_data = pop_el(\@main::el);

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

	exit 1;

}

$rs = user_dialog();

if ($rs != 0) {

	my $el_data = pop_el(\@main::el);

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

	exit 1;

}

$rs = check_host_system();

if ($rs != 0) {

	my $el_data = pop_el(\@main::el);

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

	exit 1;

}

$rs = setup_host_system();

if ($rs != 0) {

	my $el_data = pop_el(\@main::el);

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

	exit 1;

}

$rs = setup_shut_down();

if ($rs != 0) {

	my $el_data = pop_el(\@main::el);

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

	exit 1;

}
