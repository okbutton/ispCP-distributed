#!/usr/bin/perl

# ispCP ω (OMEGA) a Virtual Hosting Control Panel
# Copyright (C) 2001-2006 by moleSoftware GmbH - http://www.molesoftware.com
# Copyright (C) 2006-2010 by isp Control Panel - http://ispcp.net
#
# Version: $Id$
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is "VHCS - Virtual Hosting Control System".
#
# The Initial Developer of the Original Code is moleSoftware GmbH.
# Portions created by Initial Developer are Copyright (C) 2001-2006
# by moleSoftware GmbH. All Rights Reserved.
# Portions created by the ispCP Team are Copyright (C) 2006-2010 by
# isp Control Panel. All Rights Reserved.
#
# The ispCP ω Home Page is:
#
#    http://isp-control.net
#

use strict;
use warnings;

# FIXME: Check if it ok for all dist
use Term::ReadKey;

# Todo Add this package to package files
# (i.e. Debian: libfile-mimeinfo-perl)
use File::MimeInfo::Magic;

use Term::ANSIColor qw(:constants colored);
$Term::ANSIColor::AUTORESET = 1;

use FindBin;
use lib "$FindBin::Bin/..";

use Socket;

require 'ispcp_common_code.pl';
require 'ispcp-setup-methods.pl';

%main::ua = ();

#
##  Subroutines - Begin
#

# Start the installation process
sub setup_start_up {

	push_el(\@main::el, 'setup_start_up()', 'Starting...');

	stop_services();

	push_el(\@main::el, 'setup_start_up()', 'Ending...');

	0;
}

# Asks an set of question to user
sub user_dialog {

	push_el(\@main::el, 'user_dialog()', 'Starting...');

	my ($rs, $warn_msg) = (undef, '');

	$rs = welcome_note();

	return $rs if ($rs != 0);

	my $qmsg = "\n\tNext you are asked to enter a \"fully qualified hostname\" (FQHN).\n" .
               "\tFor more infos read http://en.wikipedia.org/wiki/FQDN.\n\n";

	print STDOUT $qmsg;

	do {
		$rs = ask_hostname();
	} while ($rs == 1);

	#return $rs if ($rs != 0);

	do {

		($rs, $warn_msg) = ask_eth();
		print STDERR $warn_msg if($warn_msg ne '');

	} while ($rs == 1);

	do {
		$rs = ask_vhost();
	} while ($rs == 1);

	#
	# SQL Questions
	#

	$rs = ask_db_host();
	return $rs if ($rs != 0);

	$rs = ask_db_name();
	return $rs if ($rs != 0);

	$rs = ask_db_user();
	return $rs if ($rs != 0);

	do {
		$rs = ask_db_password();
	} while ($rs == 1);

	#
	# ispCP ftp SQL user questions;
	#

	do {
		$rs = ask_db_ftp_user();
	} while ($rs == 1);

	do {
		$rs = ask_db_ftp_password();
	} while ($rs == 1);

	#
	# PMA user for SQL
	#

	do {
		$rs = ask_db_pma_user();
	} while ($rs == 1);

	do {
		$rs = ask_db_pma_password();
	} while ($rs == 1);

	#
	# Admin questions
	#

	$rs = ask_admin();
	return $rs if ($rs != 0);

	do {
		$rs = ask_admin_password();
	} while ($rs == 1);

	do {
		$rs = ask_admin_email();
	} while ($rs == 1);

	#
	# Configuration questions
	#

	do {
		$rs = ask_second_dns();
	} while ($rs == 1);

	do {
		$rs = ask_mysql_prefix();
	} while ($rs == 1);

	#
	# FastCGI-Version questions
	#

	do {
		$rs = ask_fastcgi();
	} while ($rs == 1);

	#
	# AWStats questions
	#

	do {
		$rs = ask_awstats_on();
	} while ($rs == 1);

	if ($main::ua{'awstats_on'} eq 'yes' || $main::ua{'awstats_on'} eq 'y') {

		do {

			$rs = ask_awstats_dyn();

		} while ($rs == 1);

	} else {

		# dummy to prevent warnings
		$main::ua{'awstats_dyn'} = 0;
	}

	$qmsg = "\n\tStarting Installation...\n";

	print STDOUT $qmsg;

	push_el(\@main::el, 'user_dialog()', 'Ending...');

	0;

}

# See check_host_sql for more information
sub check_host_system {

	my $rs = undef;

	push_el(\@main::el, 'check_host_system()', 'Starting...');

	#$rs = check_host_interface();
	#return $rs if ($rs != 0);

	$rs = check_host_sql();

	return $rs if ($rs != 0);

	push_el(\@main::el, 'check_host_system()', 'Ending...');

	0;
}

# Performs all subroutines that generate the
# configuration related to the different services
# managed by ispCP
sub setup_host_system {

	push_el(\@main::el, 'setup_host_system()', 'Starting...');

	my $rs = undef;

	if (!defined($_)) {
		$rs = setup_system_users();
		return $rs if ($rs != 0);
	}

	$rs = setup_system_dirs();
	return $rs if ($rs != 0);

	# Updates the ispcp.conf file with the values entered by user
	$rs = setup_config();
	return $rs if ($rs != 0);

	$rs = setup_sql();
	return $rs if ($rs != 0);

	# Built, stores and installs the ispCP crontab file
	$rs = setup_crontab();
	return $rs if ($rs != 0);

	$rs = setup_rkhunter();
	return $rs if ($rs != 0);

	$rs = setup_hosts();
	return $rs if ($rs != 0);

	# Only main configuration file since the generation of configuration files
	# related to the frontend (GUI) are supported by dedicated subroutines
	$rs = setup_named();
	return $rs if ($rs != 0);

	# Only system php related configuration files since the generation of
	# configuration files related to the frontend (GUI) are supported by dedicated subroutines
	$rs = setup_php();
	return $rs if ($rs != 0);

	# Only ispcp.conf Apache main IspCP vhost configuration file and related modules
	$rs = setup_httpd_main_vhost();
	return $rs if ($rs != 0);

	# Only awstats Apache vhost configuration file and related modules
	$rs = setup_awstats_vhost();
	return $rs if ($rs != 0);

	# Built, stores and installs the Postfix related configuration files
	# - main.cf, master.cf configuration files
	# Btree databases for virtuals users
	$rs = setup_mta();
	return $rs if ($rs != 0);

	# Built, stores and installs all Courier-authentication related configuration files
	$rs = setup_po();
	return $rs if ($rs != 0);

	# Built, stores and installs the proftpd main configuration file
	$rs = setup_ftpd();
	return $rs if ($rs != 0);

	# Sets correct user, group and permissions for ispCP daemon and network init scripts
	$rs = setup_ispcp_daemon_network();
	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_host_system()', 'Ending...');

	0;
}

# Performs all subroutines that generate the
# configuration related to the IspCP frontend (GUI)
sub setup_gui_cfg {

	push_el(\@main::el, 'setup_gui_cfg()', 'Starting...');

	my $rs = undef;

	# Setup named GUI related configuration files
	# - Added cfg data into named main configuration file
	# - Create named zone file
	$rs = setup_gui_named();
	return $rs if($rs != 0);

	# Create fcgi directory for the user who's used for the frontend (GUI)
	# Built, stores and installs all php dedicated configuration files (php.ini, fastCGI wrapper)
	$rs = setup_gui_php();
	return $rs if($rs != 0);

	# Built, stores and installs the GUI related Apache vhost configuration file
	$rs = setup_gui_httpd();
	return $rs if($rs != 0);

	# Create/update and install the PMA configuration file
	# Create Sql PMA controluser
	$rs = setup_gui_pma();
	return $rs if($rs != 0);

	push_el(\@main::el, 'setup_gui_cfg()', 'Ending...');

	0;
}

# End of the installation process
sub setup_shut_down {

	my $rs = undef;

	my $cmd = "$main::cfg{'CMD_SHELL'} $main::cfg{'ROOT_DIR'}/engine/setup/set-gui-permissions.sh";
	$rs = sys_command($cmd);
	return $rs if ($rs != 0);

	$cmd = "$main::cfg{'CMD_SHELL'} $main::cfg{'ROOT_DIR'}/engine/setup/set-engine-permissions.sh";
	$rs = sys_command($cmd);
	return $rs if ($rs != 0);

	$rs = setup_cleanup();
	return $rs if($rs != 0);

	start_services();

	push_el(\@main::el, 'setup_shut_down()', 'Starting...');

	my $shut_down_message = colored(['bold underline'],
		"\n\tCongratulations you installed ispCP '$main::cfg{'Version'}' successfully!\n\n");

	my $login_message =
		"\tPlease type http://$main::ua{'admin_vhost'} in your browser and\n".
		"\tlog in with your Administrator Account to use ispCP.\n\n";

	print STDOUT $shut_down_message, $login_message;

	if (sys_command_rs("which rkhunter > /dev/null") == 0 ) {

	   print STDOUT "\tSetup is now updating rkhunter:\n";
	   sys_command("rkhunter --update");
	   print STDOUT "\n\n";

	}

	push_el(\@main::el, 'setup_shut_down()', 'Ending...');

	0;
}

# Display a welcome note
sub welcome_note {

	my $rs = undef;

	push_el(\@main::el, 'welcome_note()', 'Starting...');

	my $welcome = colored(['bold underline'],
		"\n\tWelcome to ispCP '$main::cfg{'Version'}' Setup Dialog.\n\n");

	my $welcome_message =
		"\tThis program will set up ispCP OMEGA system on your server.\n";

	print STDOUT $welcome, $welcome_message;

	push_el(\@main::el, 'welcome_note()', 'Ending...');

	0;
}

# @TODO NOT USED - Should be rewritten
sub check_host_interface {

	push_el(\@main::el, 'check_host_interface()', 'Starting...');

	my ($rs, $rdata, $cmd) = (undef, undef, undef);

	$cmd = "$main::cfg{'CMD_IFCONFIG'} $main::ua{'eth'} 1>/tmp/ispcp-setup-iface.stdout 2>/tmp/ispcp-setup-iface.stderr";

	$rs = sys_command($cmd);

	if ($rs != 0) {
		push_el(\@main::el, 'check_host_interface()', "ERROR: Can't find $main::ua{'eth'} device!");
		return $rs;
	}

	$cmd = "$main::cfg{'CMD_CAT'} /tmp/ispcp-setup-iface.stdout | awk 'BEGIN { i=0 } { i++ } { if (i == 1) { print \$5 } } { if (i == 2) { print substr(\$2, 6) } }' 1>/tmp/ispcp-setup-iface-data.stdout 2>/tmp/ispcp-setup-iface-data.stderr";

	$rs = sys_command($cmd);

	($rs, $rdata) = get_file("/tmp/ispcp-setup-iface-data.stdout");
	return $rs if ($rs != 0);

	$rdata =~ /([^\n]+)\n([^\n]+)\n/;

	$main::ua{'eth_hwaddr'} = $1;

	$main::ua{'eth_ip'} = $2;

	$rs = del_file("/tmp/ispcp-setup-iface.stdout");
	return $rs if ($rs != 0);

	$rs = del_file("/tmp/ispcp-setup-iface.stderr");
	return $rs if ($rs != 0);

	$rs = del_file("/tmp/ispcp-setup-iface-data.stdout");
	return $rs if ($rs != 0);

	$rs = del_file("/tmp/ispcp-setup-iface-data.stderr");
	return $rs if ($rs != 0);

	push_el(\@main::el, 'check_host_interface()', 'Ending...');

	0;
}

# Check the connection to the IspCP database
# with the login information provided by the user
sub check_host_sql {

	push_el(\@main::el, 'check_host_sql()', 'Starting...');

	my ($rs, $rdata, $sql) = (undef, undef, undef);

	$sql = "show databases;";

	$main::db_host = $main::ua{'db_host'};

	$main::db_user = $main::ua{'db_user'};

	$main::db_pwd = $main::ua{'db_password'};

	$main::db_name = "";

	@main::db_connect = (
						 "DBI:mysql:$main::db_name:$main::db_host",
						 $main::db_user,
						 $main::db_pwd
						);

	($rs, $rdata) = doSQL($sql);

	return $rs if ($rs != 0);

	$main::db = undef;

	push_el(\@main::el, 'check_host_sql()', 'Ending...');

	0;
}

# Create users and groups for different services
sub setup_system_users {

	my ($rs, $cmd) = (undef, undef);

	push_el(\@main::el, 'setup_system_users()', 'Starting...');

	## Mailbox user
	my ($fuid, $fgid) = ($main::cfg{'MTA_MAILBOX_UID_NAME'}, $main::cfg{'MTA_MAILBOX_GID_NAME'});
	my ($uid, $gid) = (undef, undef);

	my @udata = ();
	my @gdata = ();

	@gdata = getgrnam($fgid);

	if (scalar(@gdata) == 0) { # we have not this one group data;
		$cmd = "$main::cfg{'CMD_GROUPADD'} $fgid";
		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

		@gdata = getgrnam($fgid);
	}

	$gid = $gdata[2];

	@udata = getpwnam($fuid);

	if (scalar(@udata) == 0) { # we have not this one user data;
		if ($main::cfg{'ROOT_GROUP'} eq "wheel") {
			$cmd = "$main::cfg{'CMD_USERADD'} $fuid -c vmail-user -s /bin/false";
		} else {
			$cmd = "$main::cfg{'CMD_USERADD'} -c vmail-user -g $gid -s /bin/false $fuid";
		}
		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

		@udata = getpwnam($fuid);
	}

	$uid = $udata[2];
	$main::ua{'su_uid'} = $uid;
	$main::ua{'su_gid'} = $gid;

	## FCGI Master user
	my ($muid, $mgid, $prefix) = ($main::cfg{'APACHE_SUEXEC_MIN_UID'}, $main::cfg{'APACHE_SUEXEC_MIN_GID'}, $main::cfg{'APACHE_SUEXEC_USER_PREF'});
	my ($vuuid, $vugid) = (undef, undef);

	@gdata = getgrnam($prefix.$mgid);
	@udata = getpwnam($prefix.$muid);

	if (scalar(@gdata) == 0) { # we do not have this group
		if ($main::cfg{'ROOT_GROUP'} eq "wheel") {
			$cmd = "$main::cfg{'CMD_GROUPADD'} $prefix$mgid -g $mgid";
		} else {
			$cmd = "$main::cfg{'CMD_GROUPADD'} -g $mgid $prefix$mgid";
		}
		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

	}

	# create user and folder
	if (scalar(@udata) == 0) { # we do not have this user
		if ($main::cfg{'ROOT_GROUP'} eq "wheel") {
			$cmd = "$main::cfg{'CMD_USERADD'} $prefix$muid $prefix$muid -d $main::cfg{'PHP_STARTER_DIR'}/master -m -c vu-master -g $prefix$mgid -s /bin/false -u $muid $prefix$muid";
		} else {
			$cmd = "$main::cfg{'CMD_USERADD'} -d  $main::cfg{'PHP_STARTER_DIR'}/master -m -c vu-master -g $prefix$mgid -s /bin/false -u $muid $prefix$muid";
		}

		$rs = sys_command($cmd);
		return $rs if ($rs != 0);

	} else {
		# change folder permissions and owner
		$rs = setfmode("$main::cfg{'PHP_STARTER_DIR'}/master", "$prefix$muid", "$prefix$mgid", 0755);
		return $rs if ($rs != 0);
	}

	$main::ua{'vu_uid'} = $muid;
	$main::ua{'vu_gid'} = $mgid;
	##

	push_el(\@main::el, 'setup_system_users()', 'Ending...');

	0;
}

sub setup_system_dirs {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_system_dirs()', 'Starting...');

	$rs = make_dir(
		$main::cfg{'APACHE_WWW_DIR'},
		$main::cfg{'APACHE_USER'},
		$main::cfg{'APACHE_GROUP'},
		0755
	);
	return $rs if ($rs != 0);

	$rs = make_dir(
		$main::cfg{'APACHE_USERS_LOG_DIR'},
		$main::cfg{'APACHE_USER'},
		$main::cfg{'APACHE_GROUP'},
		0755
	);
	return $rs if ($rs != 0);

	$rs = make_dir(
		$main::cfg{'APACHE_BACKUP_LOG_DIR'},
		$main::cfg{'ROOT_USER'},
		$main::cfg{'ROOT_GROUP'},
		0755
	);
	return $rs if ($rs != 0);

	$rs = make_dir(
		$main::cfg{'MTA_VIRTUAL_CONF_DIR'},
		$main::cfg{'ROOT_USER'},
		$main::cfg{'ROOT_GROUP'},
		0755
	);
	return $rs if ($rs != 0);

	$rs = make_dir(
		$main::cfg{'MTA_VIRTUAL_MAIL_DIR'},
		$main::cfg{'ROOT_USER'},
		$main::cfg{'ROOT_GROUP'},
		0755
	);
	return $rs if ($rs != 0);

	$rs = make_dir(
		$main::cfg{'LOG_DIR'},
		$main::cfg{'ROOT_USER'},
		$main::cfg{'ROOT_GROUP'},
		0755
	);
	return $rs if ($rs != 0);

	$rs = make_dir(
		$main::cfg{'BACKUP_FILE_DIR'},
		$main::cfg{'ROOT_USER'},
		$main::cfg{'ROOT_GROUP'},
		0755
	);
	return $rs if ($rs != 0);

	$rs = make_dir(
		$main::cfg{'PHP_STARTER_DIR'},
		"$main::cfg{'APACHE_SUEXEC_USER_PREF'}$main::cfg{'APACHE_SUEXEC_MIN_UID'}",
		"$main::cfg{'APACHE_SUEXEC_USER_PREF'}$main::cfg{'APACHE_SUEXEC_MIN_GID'}",
		0755
	);
	return $rs if ($rs != 0);

	# AWStats dir, use of $main::ua{'awstats_on'}, instead of $main::cfg{'AWSTATS_ACTIVE'},
	# because variable not yet set.
	if ($main::ua{'awstats_on'} eq 'yes' || $main::ua{'awstats_on'} eq 'y') {

		$rs = make_dir(
			$main::cfg{'AWSTATS_CACHE_DIR'},
			$main::cfg{'APACHE_USER'},
			$main::cfg{'APACHE_GROUP'},
			0755
		);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'setup_system_dirs()', 'Ending...');

	0;
}

# Update ispcp.conf file
sub setup_config {

	my ($rs, $rdata) = (undef, undef);

	push_el(\@main::el, 'setup_config()', 'Starting...');

	$rs = set_conf_val('SERVER_HOSTNAME', $main::ua{'hostname'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('BASE_SERVER_IP', $main::ua{'eth_ip'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('BASE_SERVER_VHOST', $main::ua{'admin_vhost'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('DATABASE_HOST', $main::ua{'db_host'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('DATABASE_NAME', $main::ua{'db_name'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('DATABASE_USER', $main::ua{'db_user'});
	return $rs if ($rs != 0);

	if ($main::ua{'db_password'} ne '') {

		($rs, $rdata) = encrypt_db_password($main::ua{'db_password'});
		return $rs if ($rs != 0);

		$rs = set_conf_val('DATABASE_PASSWORD', $rdata);
		return $rs if ($rs != 0);
	}

	$rs = set_conf_val('MTA_MAILBOX_MIN_UID', $main::ua{'su_uid'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('MTA_MAILBOX_UID', $main::ua{'su_uid'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('MTA_MAILBOX_GID', $main::ua{'su_gid'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('APACHE_SUEXEC_MIN_UID', $main::ua{'vu_uid'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('APACHE_SUEXEC_MIN_GID', $main::ua{'vu_gid'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('DEFAULT_ADMIN_ADDRESS', $main::ua{'admin_email'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('AWSTATS_ACTIVE', $main::ua{'awstats_on'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('AWSTATS_MODE', $main::ua{'awstats_dyn'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('PHP_FASTCGI', $main::ua{'php_fastcgi'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('SECONDARY_DNS', $main::ua{'secondary_dns'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('MYSQL_PREFIX', $main::ua{'mysql_prefix'});
	return $rs if ($rs != 0);

	$rs = set_conf_val('MYSQL_PREFIX_TYPE', $main::ua{'mysql_prefix_type'});
	return $rs if ($rs != 0);

	$rs = store_conf();
	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_config()', 'Ending...');

	0;
}

# Create and populates the ispCP database
# Create the SQL user for the FTP service
# Create the SQL user for PhpMyAdmin
sub setup_sql {

	my ($rs, $rdata, $cfg_tpl, $cfg) = (undef, undef, undef, undef);

	push_el(\@main::el, 'setup_sql()', 'Starting...');

	#
	# check for existing database;
	#

	my $sql = "SHOW TABLES;";

	($rs, $rdata) = doSQL($sql);

	if ($rs == 0) { # Yes, we have one ! Let's drop it;

		my $store_db_name = $main::db_name;


		# Let's reset data;
		$main::db = undef;
		$main::db_name = '';

		@main::db_connect = (
			"DBI:mysql:$main::db_name:$main::db_host",
			$main::db_user,
			$main::db_pwd
		);

		# TODO Add ask to user confirmation
		$sql = "DROP DATABASE IF EXISTS $store_db_name;";

		($rs, $rdata) = doSQL($sql);

		return $rs if ($rs != 0);


		# Let's reset data;
		$main::db = undef;

		$main::db_name = $store_db_name;

		@main::db_connect = (
			"DBI:mysql:$main::db_name:$main::db_host",
			$main::db_user,
			$main::db_pwd
		);

	}

	#
	# Now we'll create our database;
	#

	($rs, $rdata) = get_file("$main::cfg{'CONF_DIR'}/database/database.sql");

	return $rs if ($rs != 0);

	$rdata =~ s/\{DATABASE_NAME\}/$main::db_name/gi;

	$rs = store_file(
		"/tmp/db.sql",
		$rdata, $main::cfg{'ROOT_USER'},
		$main::cfg{'ROOT_GROUP'},
		0644
	);
	return $rs if ($rs != 0);

	# Escape " and '
	$main::db_pwd =~ s/([\'\"])/\\$1/g;

	my $cmd = "$main::cfg{'CMD_MYSQL'} --host='$main::db_host' --user='$main::db_user' --pass='$main::db_pwd' < /tmp/db.sql 1>/tmp/db.sql.stdout 2>/tmp/db.sql.stderr";

	$rs = sys_command($cmd);
	return $rs if ($rs != 0);

	#
	# English language table;
	#

	my $languages_sql = "$main::cfg{'CONF_DIR'}/database/languages.sql";

	$cmd = "$main::cfg{'CMD_MYSQL'} --host='$main::db_host' --user='$main::db_user' --pass='$main::db_pwd' $main::db_name < $languages_sql 1>/tmp/db.sql.stdout 2>/tmp/db.sql.stderr";

	$rs = sys_command($cmd);
	return $rs if ($rs != 0);


	$rs = del_file("/tmp/db.sql");
	return $rs if ($rs != 0);

	$rs = del_file("/tmp/db.sql.stdout");
	return $rs if ($rs != 0);

	$rs = del_file("/tmp/db.sql.stderr");
	return $rs if ($rs != 0);

	#
	# Let's populate our base with some data;
	#

	my $admin_password = crypt_md5_data($main::ua{'admin_password'});

	$sql = "INSERT INTO admin (admin_id, admin_name, admin_pass, admin_type, email) VALUES  (1, '$main::ua{'admin'}','$admin_password', 'admin','$main::ua{'admin_email'}')";

	($rs, $rdata) = doSQL($sql);

	return $rs if ($rs != 0);

	$sql = "INSERT INTO user_gui_props (user_id) values (1)";

	($rs, $rdata) = doSQL($sql);

	return $rs if ($rs != 0);

	$sql = "INSERT INTO server_ips (ip_id, ip_number, ip_domain, ip_alias) VALUES (1, '$main::ua{'eth_ip'}', '$main::ua{'hostname'}', '$main::ua{'hostname'}');";

	($rs, $rdata) = doSQL($sql);

	return $rs if ($rs != 0);

	#
	# we'll add ispCP ftp SQL user here.
	#
	$main::db = undef;

	@main::db_connect = (
		"DBI:mysql:mysql:$main::db_host",
		$main::db_user,
		$main::db_pwd
	);

	my $vftp_sql_user = $main::ua{'db_ftp_user'};
	my $vftp_sql_password = $main::ua{'db_ftp_password'};
	my $hostname = $main::ua{'db_host'};

	$sql = "DELETE FROM tables_priv WHERE Host = '$main::cfg{'SERVER_HOSTNAME'}' AND Db = '$main::db_name' AND User = '$vftp_sql_user'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "DELETE FROM user WHERE Host = '$hostname' AND User = '$vftp_sql_user'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "FLUSH PRIVILEGES";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "GRANT SELECT,INSERT,UPDATE,DELETE ON $main::db_name.ftp_group TO '$vftp_sql_user'\@'$hostname' IDENTIFIED BY '$vftp_sql_password'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "GRANT SELECT,INSERT,UPDATE,DELETE ON $main::db_name.ftp_users TO '$vftp_sql_user'\@'$hostname' IDENTIFIED BY '$vftp_sql_password'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "GRANT SELECT,INSERT,UPDATE,DELETE ON $main::db_name.quotalimits TO '$vftp_sql_user'\@'$hostname' IDENTIFIED BY '$vftp_sql_password'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$sql = "GRANT SELECT,INSERT,UPDATE,DELETE ON $main::db_name.quotatallies TO '$vftp_sql_user'\@'$hostname' IDENTIFIED BY '$vftp_sql_password'";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_sql()', 'Ending...');

	0;
}

# Adjust the table of static correspondence of hostnames.
sub setup_hosts {

	my ($rs, $data, $cmd) = (undef, undef, undef);

	push_el(\@main::el, 'setup_hosts()', 'Starting...');

	my $hostname = $main::ua{'hostname'};
	my $host = $main::ua{'hostname_local'};

	my $hostname_local = "$hostname.local";

	my $ip = $main::ua{'eth_ip'};

	my $hosts_file = "/etc/hosts";

	$cmd = "$main::cfg{'CMD_CP'} -p -f $hosts_file $hosts_file.bkp";

	$rs = sys_command_rs($cmd);
	return $rs if ($rs != 0);

	$data  = "# 'hosts' file configuration.\n\n";
	$data .= "127.0.0.1\t$hostname_local\tlocalhost\n";
	$data .= "$ip\t$hostname\t$host\n";
	$data .= "::ffff:$ip\t$hostname\t$host\n";
	$data .= "::1\tip6-localhost ip6-loopback\n";
	$data .= "fe00::0\tip6-localnet\n";
	$data .= "ff00::0\tip6-mcastprefix\n";
	$data .= "ff02::1\tip6-allnodes\n";
	$data .= "ff02::2\tip6-allrouters\n";
	$data .= "ff02::3\tip6-allhosts\n";

	$rs = store_file(
		$hosts_file,
		$data,
		$main::cfg{'ROOT_USER'},
		$main::cfg{'ROOT_GROUP'},
		0644
	);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'setup_hosts()', 'Ending...');

	0;
}

#
##  Subroutines - End
#

# Clear screen
system('clear');

my $rs = undef;
my $uc = 0;

if (defined($ARGV[0]) && $ARGV[0] eq "-rpm") {
	#if in rpm mode, rpm setup will create users
	$uc = 1;
}

$rs = setup_start_up();

if ($rs != 0) {

	my $el_data = pop_el(\@main::el);

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

	exit 1;
}

$rs = user_dialog();

if ($rs != 0) {

	my $el_data = pop_el(\@main::el);

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

	exit 1;
}

$rs = check_host_system();

if ($rs != 0) {

	my $el_data = pop_el(\@main::el);

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

	exit 1;
}

$rs = setup_host_system($uc);

if ($rs != 0) {

	my $el_data = pop_el(\@main::el);

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

	exit 1;
}

$rs = setup_gui_cfg();

if ($rs != 0) {

	my $el_data = pop_el(\@main::el);

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

	exit 1;
}

$rs = setup_shut_down();

if ($rs != 0) {

	my $el_data = pop_el(\@main::el);

	my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

	print STDERR "$msg\n";

	exit 1;
}

exit 0;
