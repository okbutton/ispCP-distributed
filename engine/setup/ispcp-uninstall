#!/usr/bin/perl

# ispCP ω (OMEGA) a Virtual Hosting Control Panel
# Copyright (c) 2001-2006 by moleSoftware GmbH
# http://www.molesoftware.com
# Copyright (c) 2006-2008 by isp Control Panel
# http://isp-control.net
#
#
# License:
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the MPL Mozilla Public License
#    as published by the Free Software Foundation; either version 1.1
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    MPL Mozilla Public License for more details.
#
#    You may have received a copy of the MPL Mozilla Public License
#    along with this program.
#
#    An on-line copy of the MPL Mozilla Public License can be found
#    http://www.mozilla.org/MPL/MPL-1.1.html
#
#
# The ispCP ω Home Page is at:
#
#    http://isp-control.net
#

use FindBin;
use lib "$FindBin::Bin/..";
require 'ispcp_common_code.pl';

use strict;
use warnings;

sub welcome_note {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'welcome_note()', 'Starting...');

    my $welcome_message = <<MSG;

    Welcome in ISPCP OMEGA '$main::cfg{'Version'}' Uninstall Program.

    This program will uninstall ispCP OMEGA system from your server.

    /!\\ WARNING: All domain users and their accounts will be removed.  /!\\

    Please press 'Enter' to continue.
MSG

    print STDOUT $welcome_message;

    $rdata = readline(\*STDIN);
	chop($rdata);

    push_el(\@main::el, 'welcome_note()', 'Ending...');

    return 0;

}

sub user_dialog {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'user_dialog()', 'Starting...');

    $rs = welcome_note();

    return $rs if ($rs != 0);

    return 0;

}

sub uninstall_start_up {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'uninstall_start_up()', 'Starting...');

    # config check;

    $rs = get_conf();

    return $rs if ($rs != 0);

    push_el(\@main::el, 'uninstall_start_up()', 'Ending...');

    return 0;

}

sub uninstall_shut_down {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'uninstall_shut_down()', 'Starting...');

    $rs = del_file("/tmp/ispcp-uninstall-services.log");

    return $rs if ($rs != 0);

    my $shut_down_message = <<MSG;

    Congratulations !

    ISPCP OMEGA '$main::cfg{'Version'}' uninstall completed successfully !

    Thank you for using ISPCP OMEGA product !

MSG

    print STDOUT $shut_down_message;

    push_el(\@main::el, 'uninstall_shut_down()', 'Ending...');

    return 0;

}

sub check_host_sql {

    push_el(\@main::el, 'check_host_sql()', 'Starting...');

    my ($rs, $rdata, $sql) = (undef, undef, undef);

    $sql = "show databases;";

    my $store_db_name = $main::db_name;

    $main::db_name = "";

    @main::db_connect = (
                         "DBI:mysql:$main::db_name:$main::db_host",
                         $main::db_user,
                         $main::db_pwd
                        );

    ($rs, $rdata) = doSQL($sql);

    return $rs if ($rs != 0);

    $main::db = undef;

    $main::db_name = $store_db_name;

    @main::db_connect = (
                         "DBI:mysql:$main::db_name:$main::db_host",
                         $main::db_user,
                         $main::db_pwd
                        );

    push_el(\@main::el, 'check_host_sql()', 'Ending...');

    return 0;
}

sub check_host_system {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'check_host_system()', 'Starting...');

    $rs = check_host_sql();

    return $rs if ($rs != 0);

    push_el(\@main::el, 'check_host_system()', 'Ending...');

    return 0;

}

sub uninstall_system_users {

    my ($rs, $rdata, $rows, $sql) = (undef, undef, undef, undef);

    push_el(\@main::el, 'uninstall_system_users()', 'Starting...');

    my ($fuid, $fgid) = ($main::cfg{'MTA_MAILBOX_UID_NAME'}, $main::cfg{'MTA_MAILBOX_GID_NAME'});

    my ($muid, $mgid) = ($main::cfg{'APACHE_SUEXEC_MIN_UID'}, $main::cfg{'APACHE_SUEXEC_MIN_GID'});

    my ($upref) = ($main::cfg{'APACHE_SUEXEC_USER_PREF'});

    my ($uid, $gid) = (undef, undef);


    my @udata = ();

    my @gdata = ();

    #
	# MTA Mailbox User
    #
    @udata = getpwnam($fuid);
    @gdata = getgrnam($fuid);

    if (scalar(@udata) != 0) { # we have not this one user data;

        my $cmd = "$main::cfg{'CMD_USERDEL'} $fuid";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

    }

    if (scalar(@gdata) != 0) { # we have not this one group data;

        my $cmd = "$main::cfg{'CMD_GROUPDEL'} $fuid";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

    }

	#
	# PHP Master
	#

	@udata = getpwnam("$upref$muid");

	if (scalar(@udata) != 0) { # we have not this one user data;

		my $cmd = "$main::cfg{'CMD_USERDEL'} $upref$muid";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

	}

	@gdata = getgrnam("$upref$mgid");

	if (scalar(@gdata) != 0) { # we have not this one group data;

		my $cmd = "$main::cfg{'CMD_GROUPDEL'} $upref$mgid";

		$rs = sys_command($cmd);

		return $rs if ($rs != 0);

	}

	#
	# Virtual User
	#

	$sql = "select domain_uid,domain_gid from domain";

	($rs, $rows) = doSQL($sql);

	return $rs if ($rs != 0);

	if (scalar(@$rows) != 0) {

		foreach (@$rows) {

			my $query_user = $_;

			@udata = getpwnam("$upref@$query_user[0]");

			if (scalar(@udata) != 0) { # we have not this one user data;

				my $cmd = "$main::cfg{'CMD_USERDEL'} $upref@$query_user[0]";

				$rs = sys_command($cmd);

				return $rs if ($rs != 0);

			}

			@gdata = getgrnam("$upref@$query_user[1]");

			if (scalar(@gdata) != 0) { # we have not this one group data;

				my $cmd = "$main::cfg{'CMD_GROUPDEL'} $upref@$query_user[0]";

				$rs = sys_command($cmd);

				return $rs if ($rs != 0);

			}

		}

	}


    push_el(\@main::el, 'uninstall_system_users()', 'Ending...');

    return 0;

}

sub uninstall_system_dirs {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'uninstall_system_dirs()', 'Starting...');

	# ask to delete directory
	$rdata = 'yes';
	my $qmsg = "\tDelete ".$main::cfg{'APACHE_WWW_DIR'}."? [yes]: ";
	print STDOUT $qmsg;

	$rdata = readline(\*STDIN);
	chop($rdata);

	if ($rdata eq 'yes' || $rdata eq 'y') {
	    $rs = del_dir($main::cfg{'APACHE_WWW_DIR'});
	    return $rs if ($rs != 0);
	}

    $rs = del_dir($main::cfg{'APACHE_USERS_LOG_DIR'});
    return $rs if ($rs != 0);

    $rs = del_dir($main::cfg{'APACHE_BACKUP_LOG_DIR'});
    return $rs if ($rs != 0);

    $rs = del_dir($main::cfg{'MTA_VIRTUAL_CONF_DIR'});
    return $rs if ($rs != 0);

    $rs = del_dir($main::cfg{'MTA_VIRTUAL_MAIL_DIR'});
    return $rs if ($rs != 0);

    $rs = del_dir($main::cfg{'LOG_DIR'});
    return $rs if ($rs != 0);

    $rs = del_dir($main::cfg{'PHP_STARTER_DIR'});
    return $rs if ($rs != 0);

    push_el(\@main::el, 'uninstall_system_dirs()', 'Ending...');

    return 0;
}

sub uninstall_sql {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'uninstall_sql()', 'Starting...');

    #
    # check for existing database;
    #

    my $sql = "show tables;";

    ($rs, $rdata) = doSQL($sql);

    if ($rs == 0) { # Yes, we have one ! Let's drop it;

        my $store_db_name = $main::db_name;


        # Let's reset data;


        $main::db = undef;

        $main::db_name = '';

        @main::db_connect = (
                             "DBI:mysql:$main::db_name:$main::db_host",
                             $main::db_user,
                             $main::db_pwd
                            );

        $sql = "drop database $store_db_name;";

        ($rs, $rdata) = doSQL($sql);

        return $rs if ($rs != 0);


        # Let's reset data;


        $main::db = undef;

        $main::db_name = $store_db_name;

        @main::db_connect = (
                             "DBI:mysql:$main::db_name:$main::db_host",
                             $main::db_user,
                             $main::db_pwd
                            );

    }

    push_el(\@main::el, 'uninstall_sql()', 'Ending...');

    return 0;

}

sub uninstall_crontab {

    my $rs = undef;

    push_el(\@main::el, 'uninstall_crontab()', 'Starting...');

    if ( -e "/etc/cron.d/ispcp") {
        $rs = del_file("/etc/cron.d/ispcp");

        return $rs if ($rs != 0);
    }

    push_el(\@main::el, 'uninstall_crontab()', 'Ending...');

    return 0;

}

sub uninstall_resolver {

    push_el(\@main::el, 'uninstall_resolver()', 'Starting...');

    my $resolv_file = "/etc/resolv.conf";

    my ($rs, $cmd) = (undef, undef);

    if ( -e "$resolv_file.bkp" ) {

        $cmd = "$main::cfg{'CMD_MV'} $resolv_file.bkp $resolv_file";

        $rs = sys_command_rs($cmd);

        return $rs if ($rs != 0);
    }

    push_el(\@main::el, 'uninstall_resolver()', 'Ending...');

    return 0;

}

sub uninstall_logrotate {

    push_el(\@main::el, 'uninstall_logrotate()', 'Starting...');

    my ($rs, $cmd) = (undef, undef);

    my $logrorate_d = "/etc/logrorate.d";

    if ( -e "$logrorate_d/ispcp" ) {

        $rs = del_file("$logrorate_d/ispcp");

        return $rs if ($rs != 0);
    }

    push_el(\@main::el, 'uninstall_logrotate()', 'Ending...');

    return 0;

}

sub uninstall_named {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'uninstall_named()', 'Starting...');

    my $cfg_dir = "$main::cfg{'CONF_DIR'}/bind";

    my $bk_dir = "$cfg_dir/backup";

    my $wrk_dir = "$cfg_dir/working";

    my ($cfg_tpl, $cfg, $cmd) = (undef, undef, undef);

    sys_command_rs("$main::cfg{'CMD_NAMED'} stop &> /tmp/ispcp-uninstall-services.log");

    if (-e "$bk_dir/named.conf.system") {

        $cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/named.conf.system $main::cfg{'BIND_CONF_FILE'}";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/named.conf.system");

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/named.conf.ispcp");

        return $rs if ($rs != 0);

    }

    sys_command_rs("$main::cfg{'CMD_NAMED'} start &> /tmp/ispcp-uninstall-services.log");

    push_el(\@main::el, 'uninstall_named()', 'Ending...');

    return 0;

}

sub uninstall_httpd {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'uninstall_httpd()', 'Starting...');

    my $cfg_dir = "$main::cfg{'CONF_DIR'}/apache";

    my $bk_dir = "$cfg_dir/backup";

    my $wrk_dir = "$cfg_dir/working";

    my ($cfg_tpl, $cfg, $cmd) = (undef, undef, undef);

    sys_command_rs("$main::cfg{'CMD_HTTPD'} stop &> /tmp/ispcp-uninstall-services.log");

    sys_command_rs("a2dissite ispcp.conf &> /tmp/ispcp-uninstall-services.log");

    $rs = del_file("$main::cfg{'APACHE_SITES_DIR'}/ispcp.conf");

    return $rs if ($rs != 0);

    sys_command_rs("a2dissite 00_master.conf &> /tmp/ispcp-uninstall-services.log");

    $rs = del_file("$main::cfg{'APACHE_SITES_DIR'}/00_master.conf");

    return $rs if ($rs != 0);

    sys_command_rs("a2dismod fastcgi_ispcp &> /tmp/ispcp-uninstall-services.log");

    $rs = del_file("$main::cfg{'APACHE_MODS_DIR'}/fastcgi_ispcp.conf");

    return $rs if ($rs != 0);

    $rs = del_file("$main::cfg{'APACHE_MODS_DIR'}/fastcgi_ispcp.load");

    return $rs if ($rs != 0);

    sleep(5);

    sys_command_rs("$main::cfg{'CMD_HTTPD'} start &> /tmp/ispcp-uninstall-services.log");

    push_el(\@main::el, 'uninstall_httpd()', 'Ending...');

    return 0;

}

sub uninstall_mta {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'uninstall_mta()', 'Starting...');

    my $cfg_dir = "$main::cfg{'CONF_DIR'}/postfix";

    my $bk_dir = "$cfg_dir/backup";

    my $wrk_dir = "$cfg_dir/working";

    my $vrl_dir = "$cfg_dir/ispcp";

    my ($cfg_tpl, $cfg, $cmd) = (undef, undef, undef);

    sys_command_rs("$main::cfg{'CMD_MTA'} stop &> /tmp/ispcp-uninstall-services.log");

    if (-e "$bk_dir/main.cf.system") {

        $cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/main.cf.system $main::cfg{'POSTFIX_CONF_FILE'}";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

        $cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/master.cf.system $main::cfg{'POSTFIX_MASTER_CONF_FILE'}";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/main.cf.system");

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/master.cf.system");

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/main.cf.ispcp");

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/master.cf.ispcp");

        return $rs if ($rs != 0);

    }

    if ( -e "/var/spool/postfix/private/ispcp-arpl" ) {
        $rs = del_file("/var/spool/postfix/private/ispcp-arpl");

        return $rs if ($rs != 0);
    }

    $rs = sys_command("$main::cfg{'CMD_NEWALIASES'} &> /tmp/ispcp-uninstall-services.log");

    return $rs if ($rs != 0);

    sys_command_rs("$main::cfg{'CMD_MTA'} start &> /tmp/ispcp-uninstall-services.log");

    push_el(\@main::el, 'uninstall_mta()', 'Ending...');

    return 0;

}

sub uninstall_po {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'uninstall_po()', 'Starting...');

    my $cfg_dir = "$main::cfg{'CONF_DIR'}/courier";

    my $bk_dir = "$cfg_dir/backup";

    my $wrk_dir = "$cfg_dir/working";

    my ($cfg_tpl, $cfg, $cmd) = (undef, undef, undef);

    sys_command_rs("$main::cfg{'CMD_AUTHD'} stop &> /tmp/ispcp-uninstall-services.log");

    sys_command_rs("$main::cfg{'CMD_IMAP'} stop &> /tmp/ispcp-uninstall-services.log");

    sys_command_rs("$main::cfg{'CMD_POP'} stop &> /tmp/ispcp-uninstall-services.log");

    if (-e "$bk_dir/imapd.system") {


        # Let's backup system configs;


        $cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/imapd.system $main::cfg{'COURIER_CONF_DIR'}/imapd";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

        $cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/pop3d.system $main::cfg{'COURIER_CONF_DIR'}/pop3d";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

	if (exists $main::cfg{'AUTHLIB_CONF_DIR'} && $main::cfg{'AUTHLIB_CONF_DIR'}) {

        $cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/authdaemonrc.system $main::cfg{'AUTHLIB_CONF_DIR'}/authdaemonrc";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

        $cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/authmodulelist.system $main::cfg{'AUTHLIB_CONF_DIR'}/authmodulelist";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

	if (-e "$bk_dir/userdb.system") {

    	    $cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/userdb.system $main::cfg{'AUTHLIB_CONF_DIR'}/userdb";

    	    $rs = sys_command($cmd);

	}

	} else {

	$cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/authdaemonrc.system $main::cfg{'COURIER_CONF_DIR'}/authdaemonrc";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

        $cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/authmodulelist.system $main::cfg{'COURIER_CONF_DIR'}/authmodulelist";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

        if (-e "$bk_dir/userdb.system") {

            $cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/userdb.system $main::cfg{'COURIER_CONF_DIR'}/userdb";

            $rs = sys_command($cmd);

        }

	}

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/imapd.system");

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/pop3d.system");

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/authdaemonrc.system");

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/authmodulelist.system");

        return $rs if ($rs != 0);

	if (-e "$bk_dir/userdb.system") {

    	    $rs = del_file("$bk_dir/userdb.system");

    	    return $rs if ($rs != 0);

	}

        $rs = del_file("$bk_dir/imapd.ispcp");

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/pop3d.ispcp");

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/authdaemonrc.ispcp");

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/authmodulelist.ispcp");

        return $rs if ($rs != 0);

    }

    $rs = sys_command($main::cfg{'CMD_MAKEUSERDB'});

    return $rs if ($rs != 0);

    sys_command_rs("$main::cfg{'CMD_AUTHD'} start &> /tmp/ispcp-uninstall-services.log");

    sys_command_rs("$main::cfg{'CMD_IMAP'} start &> /tmp/ispcp-uninstall-services.log");

    sys_command_rs("$main::cfg{'CMD_POP'} start &> /tmp/ispcp-uninstall-services.log");

    push_el(\@main::el, 'uninstall_po()', 'Ending...');

    return 0;

}

sub uninstall_ftpd {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'uninstall_ftpd()', 'Starting...');

    my $cfg_dir = "$main::cfg{'CONF_DIR'}/proftpd";

    my $bk_dir = "$cfg_dir/backup";

    my ($cfg_tpl, $cfg, $cmd) = (undef, undef, undef);

    sys_command_rs("$main::cfg{'CMD_FTPD'} stop &> /tmp/ispcp-uninstall-services.log");

    if (-e "$bk_dir/proftpd.conf.system") {

        $cmd = "$main::cfg{'CMD_CP'} -p $bk_dir/proftpd.conf.system $main::cfg{'FTPD_CONF_FILE'}";

        $rs = sys_command($cmd);

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/proftpd.conf.system");

        return $rs if ($rs != 0);

        $rs = del_file("$bk_dir/proftpd.conf.ispcp");

        return $rs if ($rs != 0);

    }

    sys_command_rs("$main::cfg{'CMD_FTPD'} start &> /tmp/ispcp-uninstall-services.log");

    push_el(\@main::el, 'uninstall_ftpd()', 'Ending...');

    return 0;

}

sub uninstall_ispcpd {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'uninstall_ispcpd()', 'Starting...');

    sys_command_rs("$main::cfg{'CMD_ISPCPD'} stop &> /tmp/ispcp-uninstall-services.log");

    sys_command_rs("$main::cfg{'CMD_ISPCPN'} stop &> /tmp/ispcp-uninstall-services.log");

    if ( -x "/usr/lib/lsb/install_initd" ) { #LSB 3.1 Core section 20.4 compatibility

        sys_command_rs("/usr/lib/lsb/install_initd $main::cfg{'CMD_ISPCPD'} &> /tmp/ispcp-uninstall-services.log");
        sys_command_rs("/usr/lib/lsb/install_initd $main::cfg{'CMD_ISPCPN'} &> /tmp/ispcp-uninstall-services.log");

    }

    $rs = del_file("$main::cfg{'CMD_ISPCPD'}");

    return $rs if ($rs != 0);

    $rs = del_file("$main::cfg{'CMD_ISPCPN'}");

    return $rs if ($rs != 0);

    if ( ! -x "/usr/lib/lsb/install_initd" && -x "/usr/sbin/update-rc.d" ) {

        sys_command_rs("/usr/sbin/update-rc.d ispcp_daemon remove &> /tmp/ispcp-uninstall-services.log");
        sys_command_rs("/usr/sbin/update-rc.d ispcp_network remove &> /tmp/ispcp-uninstall-services.log");

    }

    push_el(\@main::el, 'uninstall_ispcpd()', 'Ending...');

    return 0;

}

sub uninstall_host_system {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'uninstall_host_system()', 'Starting...');

    $rs = uninstall_system_users();

    return $rs if ($rs != 0);

    $rs = uninstall_system_dirs();

    return $rs if ($rs != 0);

    $rs = uninstall_sql();

    return $rs if ($rs != 0);

    $rs = uninstall_crontab();

    return $rs if ($rs != 0);

    $rs = uninstall_resolver();

    return $rs if ($rs != 0);

    $rs = uninstall_httpd();

    return $rs if ($rs != 0);

    $rs = uninstall_mta();

    return $rs if ($rs != 0);

    $rs = uninstall_po();

    return $rs if ($rs != 0);

    $rs = uninstall_ftpd();

    return $rs if ($rs != 0);

    $rs = uninstall_named();

    return $rs if ($rs != 0);

    $rs = uninstall_ispcpd();

    return $rs if ($rs != 0);

    push_el(\@main::el, 'uninstall_host_system()', 'Ending...');

    return 0;

}

################################################################################
##                                    MAIN                                    ##
################################################################################

my $rs = undef;

$rs = uninstall_start_up();

if ($rs != 0) {

    my $el_data = pop_el(\@main::el);

    my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

    print STDERR "$msg\n";

    exit 1;

}

$rs = user_dialog();

if ($rs != 0) {

    my $el_data = pop_el(\@main::el);

    my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

    print STDERR "$msg\n";

    exit 1;

}

$rs = check_host_system();

if ($rs != 0) {

    my $el_data = pop_el(\@main::el);

    my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

    print STDERR "$msg\n";

    exit 1;

}

$rs = uninstall_host_system();

if ($rs != 0) {

    my $el_data = pop_el(\@main::el);

    my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

    print STDERR "$msg\n";

    exit 1;

}

$rs = uninstall_shut_down();

if ($rs != 0) {

    my $el_data = pop_el(\@main::el);

    my ($sub_name, $msg) = split(/$main::el_sep/, $el_data);

    print STDERR "$msg\n";

    exit 1;

}
