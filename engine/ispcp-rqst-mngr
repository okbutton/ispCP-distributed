#!/usr/bin/perl

# ispCP ω (OMEGA) a Virtual Hosting Control Panel
# Copyright (c) 2001-2006 by moleSoftware GmbH
# http://www.molesoftware.com
# Copyright (c) 2006-2008 by isp Control Panel
# http://isp-control.net
#
#
# License:
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the MPL Mozilla Public License
#    as published by the Free Software Foundation; either version 1.1
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    MPL Mozilla Public License for more details.
#
#    You may have received a copy of the MPL Mozilla Public License
#    along with this program.
#
#    An on-line copy of the MPL Mozilla Public License can be found
#    http://www.mozilla.org/MPL/MPL-1.1.html
#
#
# The ISPCP ω Home Page is at:
#
#    http://isp-control.net
#

use FindBin;
use lib "$FindBin::Bin/";
require 'ispcp_common_code.pl';

use strict;

use warnings;

sub mngr_start_up {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'mngr_start_up()', 'Starting...');

    # lock check;

    $rs = lock_system();

    return $rs if ($rs != 0);

    # Let's clear Execution Logs, if any.

    if (-e $main::ispcp_rqst_mngr_el) {

        $rs = del_file($main::ispcp_rqst_mngr_el);

        return $rs if ($rs != 0);

    }

    # config check;

    $rs = get_conf();

    return $rs if ($rs != 0);

    # sql check;

    my $sql = "select admin_id from admin where admin_id = 1;";

    ($rs, $rdata) = doSQL($sql);

    return $rs if ($rs != 0);

    push_el(\@main::el, 'mngr_start_up()', 'Ending...');

    return 0;

}

sub mngr_shut_down {

    my $rs = undef;

    push_el(\@main::el, 'mngr_shut_down()', 'Starting...');

    $rs = unlock_system();

    return $rs if ($rs != 0);

    push_el(\@main::el, 'mngr_shut_down()', 'Ending...');

    return 0;

}

sub mngr_engine {

    my ($rs, $rdata) = (undef, undef);

    push_el(\@main::el, 'mngr_engine()', 'Starting...');

    my $sql;

    #
    # Proceed tasks, if any.
    #

    $sql = "select domain_id, domain_name, domain_status from domain where domain_status != 'ok' order by domain_id";

    ($rs, $rdata) = doSQL($sql);

    my $dmn_count = @$rdata;

    if ($dmn_count > 0) {

        foreach (@$rdata) {

            my $row = $_;

            my ($dmn_id, $dmn_name, $dmn_status) = (@$row[0], @$row[1], @$row[2]);

            if (
                $dmn_status eq "toadd" ||
                $dmn_status eq "change" ||
                $dmn_status eq "restore" ||
                $dmn_status eq "toenable" ||
                $dmn_status eq "todisable"
               ) {

                if ($dmn_status eq "restore") {

                    $dmn_count--;

                }

                if (defined($main::engine_debug)) {

                    push_el(\@main::el, 'mngr_engine()', "processing $dmn_id, $dmn_name, $dmn_status.");

                }

                $rs = sys_command("$main::ispcp_dmn_mngr $dmn_id 1>$main::ispcp_dmn_mngr_stdout 2>$main::ispcp_dmn_mngr_stderr");

                if ($rs != 0) {

                    if (-e $main::ispcp_dmn_mngr_el) {

                        my $rs1 = undef;

                        pop_el(\@main::el); # removing 'sys_command()' error message;

                        ($rs1, $rdata) = get_el_error($main::ispcp_dmn_mngr_el);

                        return $rs1 if ($rs1 != 0);

                        push_el(\@main::el, $main::ispcp_dmn_mngr, $rdata);

                    }

                    if (!defined($main::engine_debug)) {

                        del_file($main::ispcp_dmn_mngr_stdout); del_file($main::ispcp_dmn_mngr_stderr);

                    }

                    return $rs;

                }

                if (!defined($main::engine_debug)) {

                    del_file($main::ispcp_dmn_mngr_stdout); del_file($main::ispcp_dmn_mngr_stderr);

                }


            }

        }

    }

    $sql = "select mail_id, mail_acc, status from mail_users where status != 'ok' and status != 'ordered' order by mail_id";

    ($rs, $rdata) = doSQL($sql);

    my $mail_count = @$rdata;

    if ($mail_count > 0) {

        foreach (@$rdata) {

            my $row = $_;

            my ($mail_id, $mail_acc, $mail_status) = (@$row[0], @$row[1], @$row[2]);

            if ($mail_status eq "toadd" || $mail_status eq "change" || $mail_status eq "delete") {

                if (defined($main::engine_debug)) {

                    push_el(\@main::el, 'mngr_engine()', "processing $mail_id, $mail_acc, $mail_status.");

                }

            }

            $rs = sys_command("$main::ispcp_mbox_mngr $mail_id 1>$main::ispcp_mbox_mngr_stdout 2>$main::ispcp_mbox_mngr_stderr");

            if ($rs != 0) {

                if (-e $main::ispcp_mbox_mngr_el) {

                    my $rs1 = undef;

                    pop_el(\@main::el); # removing 'sys_command()' error message;

                    ($rs1, $rdata) = get_el_error($main::ispcp_mbox_mngr_el);

                    return $rs1 if ($rs1 != 0);

                    push_el(\@main::el, $main::ispcp_mbox_mngr, $rdata);

                }

                if (!defined($main::engine_debug)) {

                    del_file($main::ispcp_mbox_mngr_stdout); del_file($main::ispcp_mbox_mngr_stderr);

                }

                return $rs;

            }

            if (!defined($main::engine_debug)) {

                del_file($main::ispcp_mbox_mngr_stdout); del_file($main::ispcp_mbox_mngr_stderr);

            }

        }

    }

    $sql = "select subdomain_id, subdomain_name, subdomain_status from subdomain where subdomain_status != 'ok' order by subdomain_id";

    ($rs, $rdata) = doSQL($sql);

    my $sub_count = @$rdata;

    if ($sub_count > 0) {

        foreach (@$rdata) {

            my $row = $_;

            my ($sub_id, $sub_name, $sub_status) = (@$row[0], @$row[1], @$row[2]);

            if ($sub_status eq "toadd" || $sub_status eq "change" || $sub_status eq "delete") {

                if (defined($main::engine_debug)) {

                    push_el(\@main::el, 'mngr_engine()', "processing $sub_id, $sub_name, $sub_status.");

                }

                $rs = sys_command("$main::ispcp_sub_mngr $sub_id 1>$main::ispcp_sub_mngr_stdout 2>$main::ispcp_sub_mngr_stderr");

                if ($rs != 0) {

                    if (-e $main::ispcp_sub_mngr_el) {

                        my $rs1 = undef;

                        pop_el(\@main::el); # removing 'sys_command()' error message;

                        ($rs1, $rdata) = get_el_error($main::ispcp_sub_mngr_el);

                        return $rs1 if ($rs1 != 0);

                        push_el(\@main::el, $main::ispcp_sub_mngr, $rdata);

                    }

                    if (!defined($main::engine_debug)) {

                        del_file($main::ispcp_sub_mngr_stdout); del_file($main::ispcp_sub_mngr_stderr);

                    }

                    return $rs;

                }

                if (!defined($main::engine_debug)) {

                    del_file($main::ispcp_sub_mngr_stdout); del_file($main::ispcp_sub_mngr_stderr);

                }

            }

        }

    }

    $sql = "select alias_id, alias_name, alias_status from domain_aliasses where alias_status != 'ok' and alias_status != 'ordered' order by alias_id";

    ($rs, $rdata) = doSQL($sql);

    my $als_count = @$rdata;

    if ($als_count > 0) {

        foreach (@$rdata) {

            my $row = $_;

            my ($als_id, $als_name, $als_status) = (@$row[0], @$row[1], @$row[2]);

            if ($als_status eq "toadd" || $als_status eq "change" || $als_status eq "delete") {

                if (defined($main::engine_debug)) {

                    push_el(\@main::el, 'mngr_engine()', "processing $als_id, $als_name, $als_status.");

                }

                $rs = sys_command("$main::ispcp_als_mngr $als_id 1>$main::ispcp_als_mngr_stdout 2>$main::ispcp_als_mngr_stderr");

                if ($rs != 0) {

                    if (-e $main::ispcp_als_mngr_el) {

                        my $rs1 = undef;

                        pop_el(\@main::el); # removing 'sys_command()' error message;

                        ($rs1, $rdata) = get_el_error($main::ispcp_als_mngr_el);

                        return $rs1 if ($rs1 != 0);

                        push_el(\@main::el, $main::ispcp_als_mngr, $rdata);

                    }

                    if (!defined($main::engine_debug)) {

                        del_file($main::ispcp_als_mngr_stdout); del_file($main::ispcp_als_mngr_stderr);

                    }

                    return $rs;

                }

                if (!defined($main::engine_debug)) {

                    del_file($main::ispcp_als_mngr_stdout); del_file($main::ispcp_als_mngr_stderr);

                }


            }

        }

    }

    $sql = "select subdomain_alias_id, subdomain_alias_name, subdomain_alias_status from subdomain_alias where subdomain_alias_status != 'ok' order by subdomain_alias_id";

    ($rs, $rdata) = doSQL($sql);

    my $alssub_count = @$rdata;

    if ($alssub_count > 0) {
        foreach (@$rdata) {

            my $row = $_;

            my ($sub_id, $sub_name, $sub_status) = (@$row[0], @$row[1], @$row[2]);

            if ($sub_status eq "toadd" || $sub_status eq "change" || $sub_status eq "delete") {

                if (defined($main::engine_debug)) {

                    push_el(\@main::el, 'mngr_engine()', "processing $sub_id, $sub_name, $sub_status.");

                }

                $rs = sys_command("$main::ispcp_alssub_mngr $sub_id 1>$main::ispcp_alssub_mngr_stdout 2>$main::ispcp_alssub_mngr_stderr");

                if ($rs != 0) {

                    if (-e $main::ispcp_alssub_mngr_el) {

                        my $rs1 = undef;

                        pop_el(\@main::el); # removing 'sys_command()' error message;

                        ($rs1, $rdata) = get_el_error($main::ispcp_alssub_mngr_el);

                        return $rs1 if ($rs1 != 0);

                        push_el(\@main::el, $main::ispcp_alssub_mngr, $rdata);

                    }

                    if (!defined($main::engine_debug)) {

                        del_file($main::ispcp_alssub_mngr_stdout); del_file($main::ispcp_alssub_mngr_stderr);

                    }

                    return $rs;

                }

                if (!defined($main::engine_debug)) {

                    del_file($main::ispcp_alssub_mngr_stdout); del_file($main::ispcp_alssub_mngr_stderr);

                }

            }

        }

    }

    if ($dmn_count > 0 || $sub_count > 0 || $als_count > 0 || $mail_count > 0 || $alssub_count > 0) {

        $rs = sys_command("$main::ispcp_serv_mngr $dmn_count $sub_count $als_count $mail_count $alssub_count 1>$main::ispcp_serv_mngr_stdout 2>$main::ispcp_serv_mngr_stderr");

        if ($rs != 0) {

            if (-e $main::ispcp_serv_mngr_el) {

                my $rs1 = undef;

                pop_el(\@main::el); # removing 'sys_command()' error message;

                ($rs1, $rdata) = get_el_error($main::ispcp_serv_mngr_el);

                return $rs1 if ($rs1 != 0);

                push_el(\@main::el, $main::ispcp_serv_mngr, $rdata);

            }

            if (!defined($main::engine_debug)) {

                del_file($main::ispcp_serv_mngr_stdout); del_file($main::ispcp_serv_mngr_stderr);

            }

            return $rs;

        }

        if (!defined($main::engine_debug)) {

            del_file($main::ispcp_serv_mngr_stdout); del_file($main::ispcp_serv_mngr_stderr);

        }


    }

    $sql = "select domain_id, domain_name, domain_status from domain where domain_status != 'ok' order by domain_id";

    ($rs, $rdata) = doSQL($sql);

    $dmn_count = @$rdata;

    if ($dmn_count > 0) {

        foreach (@$rdata) {

            my $row = $_;

            my ($dmn_id, $dmn_name, $dmn_status) = (@$row[0], @$row[1], @$row[2]);

            if ($dmn_status eq "delete") {

                if (defined($main::engine_debug)) {

                    push_el(\@main::el, 'mngr_engine()', "processing $dmn_id, $dmn_name, $dmn_status.");

                }

                $rs = sys_command("$main::ispcp_dmn_mngr $dmn_id 1>$main::ispcp_dmn_mngr_stdout 2>$main::ispcp_dmn_mngr_stderr");

                if ($rs != 0) {

                    if (-e $main::ispcp_dmn_mngr_el) {

                        my $rs1 = undef;

                        pop_el(\@main::el); # removing 'sys_command()' error message;

                        ($rs1, $rdata) = get_el_error($main::ispcp_dmn_mngr_el);

                        return $rs1 if ($rs1 != 0);

                        push_el(\@main::el, $main::ispcp_dmn_mngr, $rdata);

                    }

                    if (!defined($main::engine_debug)) {

                        del_file($main::ispcp_dmn_mngr_stdout); del_file($main::ispcp_dmn_mngr_stderr);

                    }

                    return $rs;

                }

                if (!defined($main::engine_debug)) {

                    del_file($main::ispcp_dmn_mngr_stdout); del_file($main::ispcp_dmn_mngr_stderr);

                }


            }

        }

    }

	#
	# .htusers management BEGIN.
	#

	$sql = "select `id`, `status` from `htaccess_users` where `status` != 'ok' order by `id`";

	($rs, $rdata) = doSQL($sql);

	my $htusers_count = @$rdata;

	if ($htusers_count > 0) {

		foreach (@$rdata) {

			my $row = $_;

			my ($htusers_id, $htusers_status) = (@$row[0], @$row[1]);

			if ($htusers_status eq "toadd" || $htusers_status eq "change" || $htusers_status eq "delete") {

				push_el(\@main::el, 'mngr_engine()', "processing $htusers_id, $htusers_status.")

					if (defined($main::engine_debug));

				$rs = sys_command("$main::ispcp_htusers_mngr $htusers_id 1>$main::ispcp_htusers_mngr_stdout 2>$main::ispcp_htusers_mngr_stderr");

				if ($rs != 0) {

					if (-e $main::ispcp_htusers_mngr_el) {

						my $rs1 = undef;

						pop_el(\@main::el); # removing 'sys_command()' error message;

						($rs1, $rdata) = get_el_error($main::ispcp_htusers_mngr_el);

						return $rs1 if ($rs1 != 0);

						push_el(\@main::el, $main::ispcp_htusers_mngr, $rdata);

					}

					if (!defined($main::engine_debug)) {

						del_file($main::ispcp_htusers_mngr_stdout); del_file($main::ispcp_htusers_mngr_stderr);

					}

					return $rs;

				}

				if (!defined($main::engine_debug)) {

					del_file($main::ispcp_htusers_mngr_stdout); del_file($main::ispcp_htusers_mngr_stderr);

				}

			}

		}

	}

	#
	# .htusers management END.
	#

	#
	# .htgroups management BEGIN.
	#

	$sql = "select `dmn_id`, `id`, `status` from `htaccess_groups` where `status` in ('toadd', 'change', 'delete') group by `dmn_id` order by `dmn_id`";

	($rs, $rdata) = doSQL($sql);

	my $htgroups_count = @$rdata;

	if ($htgroups_count > 0) {

		foreach (@$rdata) {

			my $row = $_;

			my ($htdmn_id, $htgroups_id, $htgroups_status) = (@$row[0], @$row[1], @$row[2]);

			push_el(\@main::el, 'mngr_engine()', "processing $htdmn_id -> $htgroups_id, $htgroups_status.")

				if (defined($main::engine_debug));

			$rs = sys_command("$main::ispcp_htgroups_mngr $htdmn_id 1>$main::ispcp_htgroups_mngr_stdout 2>$main::ispcp_htgroups_mngr_stderr");

			if ($rs != 0) {

				if (-e $main::ispcp_htgroups_mngr_el) {

					my $rs1 = undef;

					pop_el(\@main::el); # removing 'sys_command()' error message;
					($rs1, $rdata) = get_el_error($main::ispcp_htgroups_mngr_el);

					return $rs1 if ($rs1 != 0);

					push_el(\@main::el, $main::ispcp_htgroups_mngr, $rdata);

				}

				if (!defined($main::engine_debug)) {

					del_file($main::ispcp_htgroups_mngr_stdout); del_file($main::ispcp_htgroups_mngr_stderr);

				}

				return $rs;

			}

			if (!defined($main::engine_debug)) {

				del_file($main::ispcp_htgroups_mngr_stdout); del_file($main::ispcp_htgroups_mngr_stderr);

			}

		}

	}

	#
	# .htgroups management END.
	#

	#
	# .htaccess management BEGIN.
	#

	$sql = "select id, status from htaccess where status != 'ok' order by id";

	($rs, $rdata) = doSQL($sql);

	my $htaccess_count = @$rdata;

	if ($htaccess_count > 0) {

		foreach (@$rdata) {

			my $row = $_;

			my ($htaccess_id, $htaccess_status) = (@$row[0], @$row[1]);

			if ($htaccess_status eq "toadd" || $htaccess_status eq "change" || $htaccess_status eq "delete") {

				push_el(\@main::el, 'mngr_engine()', "processing $htaccess_id, $htaccess_status.")

					if (defined($main::engine_debug));

				$rs = sys_command("$main::ispcp_htaccess_mngr $htaccess_id 1>$main::ispcp_htaccess_mngr_stdout 2>$main::ispcp_htaccess_mngr_stderr");

				if ($rs != 0) {

					if (-e $main::ispcp_htaccess_mngr_el) {

						my $rs1 = undef;

						pop_el(\@main::el); # removing 'sys_command()' error message;

						($rs1, $rdata) = get_el_error($main::ispcp_htaccess_mngr_el);

						return $rs1 if ($rs1 != 0);

						push_el(\@main::el, $main::ispcp_htaccess_mngr, $rdata);

					}

					if (!defined($main::engine_debug)) {

						del_file($main::ispcp_htaccess_mngr_stdout); del_file($main::ispcp_htaccess_mngr_stderr);

					}

					return $rs;

				}

				if (!defined($main::engine_debug)) {

					del_file($main::ispcp_htaccess_mngr_stdout); del_file($main::ispcp_htaccess_mngr_stderr);

				}

			}

		}

	}

	#
	# .htaccess management END.
	#

	push_el(\@main::el, 'mngr_engine()', 'Ending...');

	return 0;

}

my $rs = undef;

$rs = mngr_start_up();

if ($rs != 0) {

    dump_el(\@main::el, $main::ispcp_rqst_mngr_el);

    mngr_shut_down();

    exit 1;

}

$rs = mngr_engine();

if ($rs != 0) {

    dump_el(\@main::el, $main::ispcp_rqst_mngr_el);

    mngr_shut_down();

    exit 1;

}

$rs = mngr_shut_down();

if ($rs != 0) {

    dump_el(\@main::el, $main::ispcp_rqst_mngr_el);

    exit 1;

}
